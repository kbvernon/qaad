{
  "hash": "002f97ce39cb7161249b6ee5ac42da56",
  "result": {
    "markdown": "---\ntitle: \"Lab 01: Introduction\"\ndescription: an introduction to R, RStudio, and Quarto\ndate: today\n---\n\n\n## Outline\n\n### Objectives\n\nIn this lab, you will learn\n\n1. how to use RStudio\n2. how to make a plot with R \n2. how to do math in R, create objects, use functions, etc.,\n2. how to create an R Project folder\n2. how to make a website (what?!) with Quarto\n2. and, you'll also learn the ends and outs of a typical workflow in R\n\n### R Packages\n\nNo additional packages required this week.\n\n### Data\n\n- `cars`\n  - Includes measurements of car speed and stopping distance.\n  - package: `datasets`\n  - reference: <https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/cars.html>\n  \n## Working in RStudio\n\n![](images/rstudio_panes.png){width=\"100%\" fig-align=\"center\"}\n\nIf you are going to do anything with R, [RStudio](https://rstudio.com/) is hands-down the best place to do it. RStudio is an open-source integrated development environment (or IDE) that makes programming in R simpler, more efficient, and most importantly, more reproducible. Some of its more user-friendly features are syntax highlighting (it displays code in different colors depending on what it is or does, which makes it easier for you to navigate the code that you've written), code completion (it will try to guess what code you are attempting to write and write it for you), and keyboard shortcuts for the more repetitive tasks. \n\n### Pane layout\n\nWhen you first open RStudio, you should see three window panes: the Console, the Environment, and the Viewer. If you open an R script, a fourth Source pane will also open. The default layout of these panes is shown in the figure above.  \n\n- __Source__. The Source pane provides basic text editing functionality, allowing you to create and edit R scripts. Importantly, you cannot execute the code in these scripts directly, but you can save the scripts that you write as simple text files. A dead give away that you have an R script living on your computer is the _.R_ extension, for example, _my_script.R_.   \n- __Console__. The Console pane, as its name suggests, provides an interface to the R console, which is where your code actually gets run. While you can type R code directly into the console, you can't save the R code you write there into an R script like you can with the Source editor. That means you should reserve the console for _non-essential_ tasks, meaning tasks that are not required to replicate your results.\n- __Environment__. The Environment pane is sort of like a census of your digital zoo, providing a list of its denizens, i.e., the objects that you have created during your session. This pane also has the History tab, which shows the R code you have sent to the console in the order that you sent it.  \n- __Viewer__. The Viewer pane is a bit of a catch-all, including a Files tab, a Plots tab, a Help tab, and a Viewer tab. \n    - The Files tab works like a file explorer. You can use it to navigate through folders and directories. By default, it is set to your working directory.\n    - The Plots tab displays any figures you make with R.\n    - The Help tab is where you can go to find helpful R documentation, including function pages and vignettes.\n    - The actual Viewer tab provides a window to visualize R Markdown.\n\nLet's try out a few bits of code just to give you a sense of the difference between Source and Console.\n\n:::rmdnote\nAs you work through this lab, you can practice running code in the Console, but make sure to do the actual exercises in an R script.\n:::\n\n### Exercises\n\n1. First, let's open a new R script. To open an R script in RStudio, just click __File > New File > R Script__ (or hit `Ctrl + Shift + N`, `Cmd + Shift + N` on Mac OS). \n2. Copy this code into the console and hit Enter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(\"Boba Fett\", 5)\n```\n:::\n\n\n3. Now, copy that code into the R script you just opened and hit Enter again. As you see, the code does not run. Instead, the cursor moves down to the next line. To actually run the code, put the cursor back on the line with the code, and hit `Ctrl + Enter` (`CMD + Enter` on Mac OS).\n\n## Make Your First Plot!\n\nTo ease you into working with R, let's visualize some data to answer a simple question: Do fast moving objects take longer to slow down than slow moving objects? Don't worry about understanding all of this! It's just to give you a feel for the sort of graphics you can make with R. We'll actually spend all of the next lab learning how to make even better graphics.  \n\n### The data\n\nTo answer that question, we'll use the `cars` data.frame that comes pre-loaded with R. A data.frame is simply an R object that stores tabular data, with rows for each observation and columns for each variable. Let's have a look at the first _n_ rows of this table, specifically the first 5 rows. We can do this using the function `head()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cars, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n```\n:::\n:::\n\n\nNote that, in this case, each row represents a car. The first column, or variable, records the  __speed__ (in miles per hour) each car was traveling when it applied its brakes, and the second column provides measures of the **dist**ances (in feet) that each took to stop.   \n\n### The `plot()` function\n\nThe base R `graphics` package provides a generic function for plotting, which - as you might have guessed - is called `plot()`. To see how it works, try running this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cars)\n```\n\n::: {.cell-output-display}\n![](01-intro-lab_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Customizing your plot\n\nWith the `plot()` function, you can do a lot of customization to the resulting graphic. For instance, you can modify all of the following:\n\n- `pch` will change the point type,\n- `main` will change the main plot title,\n- `xlab` and `ylab` will change the x and y axis labels,\n- `cex` will change the size of shapes within the plot region,\n- `pch` will change the type of point used (you can use triangles, squares, or diamonds, among others), \n- `col` changes the color of the point (or its border), and\n- `bg` changes the color of the point fill (depending on the type of point it is)\n\nFor instance, try running this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n```\n\n::: {.cell-output-display}\n![](01-intro-lab_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Exercises\n\n1. Complete the following line of code to preview only the first three rows of the `cars` table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cars, n = )\n```\n:::\n\n\n2. Modify the code below to change the size (`cex`) of the points from 2 to 1.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n```\n:::\n\n\n3. What does this plot tell us about the relationship between car speed and stopping distance? Is it positive or negative? Or is there no relationship at all? If there is a relationship, what might explain it?\n\n4. Complete the code below to add \"Stopping distance for cars\" as the `main` title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 1,\n  main = \n)\n```\n:::\n\n\n5. Complete the code below to add \"Speed (mph)\" as the x-axis label and \"Distance (ft)\" as the y-axis label.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2,\n  main = \"Stopping distance for cars\",\n  xlab = ,\n  ylab = \n)\n```\n:::\n\n\n## R Basics\n\n![](images/r-stuff.png){width=\"75%\" fig-align=\"center\"}\n\n### R is a calculator\n\nYou can just do math with it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n300 * (2/25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n\n```{.r .cell-code}\n3^2 + 42\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51\n```\n:::\n\n```{.r .cell-code}\nsin(17)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.9613975\n```\n:::\n:::\n\n\n### Objects and Functions\n\nBut, R is more than just a calculator. There are a lot of things you can _make_ with R, and a lot of things you can _do_ with it. The things that you make are called __objects__ and the things that you do things with are called __functions__. Any complex statistical operation you want to conduct in R will almost certainly involve the use of one or more functions.  \n\n#### Calling functions\n\nTo use a function, we _call_ it like this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(arg1 = value1, arg2 = value2, ...)\n```\n:::\n\n\nTry calling the `seq()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\nAs you can see, this generates a sequence of numbers starting at 1 and ending at 5. There are two things to note about this. First, we do not have to specify the __arguments__ explicitly, but they must be in the correct order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nseq(5, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 4 3 2 1\n```\n:::\n:::\n\n\nSecond, the `seq()` function has additional arguments you can specify, like `by` and `length`. While we do not have to specify these because they have default values, you can change one or the other (but not at the same time!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 5, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n\n```{.r .cell-code}\nseq(1, 5, length = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\n#### Creating objects\n\nTo make an object in R, you use the arrow, `<-`, like so:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nobject_name <- value\n```\n:::\n\n\nTry creating an object with value 5.137 and assigning it to the name `bob`, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbob <- 5.137\n```\n:::\n\n\nThere are three things to note here. First, names in R must start with a letter and can only contain letters, numbers, underscores, and periods.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nwinter_solder <- \"Buckey\"\nobject4 <- 23.2\n\n# Bad\nwinter soldier <- \"Buckey\" # spaces not allowed\n4object <- 23.2            # cannot start with a number\n```\n:::\n\n\nSecond, when you create an object with `<-`, it ends up in your _workspace_ or _environment_ (you can see it in the RStudio environment pane). Finally, it is worth noting that the advantage of creating objects is that we can take the output of one function and pass it to another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(1, 5, length = 3)\n\nlogx <- log(x)\n\nexp(logx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\n### Exercises\n\n1. Use `seq()` to generate a sequence of numbers from 3 to 12.\n\n2. Use `seq()` to generate a sequence of numbers from 3 to 12 with length 25.\n\n3. Why doesn't this code work?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 5, by = 2, length = 10)\n```\n:::\n\n\n4. Use `<-` to create an object with value 25 and assign it to a name of your choice.\n\n5. Now try to create another object with a different value and name.  \n\n6. What is wrong with this code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2bob <- 10\n```\n:::\n\n\n## Workflow \n\n![](images/r-workflow.png){width=\"60%\" fig-align=\"center\"}\n\nAs you work more and more in R, you will learn that statistical analyses tend to involve the same basic set of tasks: \n\n- __importing__ data, \n- __wrangling__ data to get it into a format necessary for analysis, \n- __exploring__ data with some simple descriptive statistics,  \n- __analyzing__ data with models to investigate potential trends or relationships, and \n- __summarizing__ the results. \n\nAt various stages, you will also spend considerable time  \n\n- __visualizing__ the data and the results, either to explore the data further or to help communicate the results to others. \n\nA lot of the output of this process, we will also want to save for later, perhaps to include in a publication (like a figure or model summary), but maybe also to avoid repetition of difficult and time-consuming tasks, so the workflow will also involve  \n\n- __exporting__ refined data and models.  \n\nTo make this more concrete, let's try out an example, working with the `cars` data again. As we go through this, try running all the code in the console.   \n\n### An Example\n\nSuppose we return to the question we asked in the plotting section:  Does the speed a car is going when it applies its brakes determine the distance it takes the car to stop? Obviously, the answer is Yes, but let's pretend we don't know the answer, so we can walk through the process of answering the question anyway. \n\n#### Import\n\nFirst, we need some data. In this case, we do not actually need to import the `cars` dataset because it is already available to us in R, so let's just pretend like we did. \n\n#### Explore\n\nNow, let's explore the data. Always, always, always, the best way to explore data is to visualize data! We already did this once, but it can't hurt to try it again!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = adjustcolor(\"gray\", 0.75),\n  col = \"gray25\",\n  cex = 1.5\n)\n```\n\n::: {.cell-output-display}\n![](01-intro-lab_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThen, we can do things like calculate the mean stopping distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(cars$dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42.98\n```\n:::\n:::\n\n\nNote that we use the `$` operator to pull the distance (`dist`) values from the `cars` table and supply it to the `mean()` function. Don't worry too much about wrapping your head around that idea as we will talk about it more in another lab. We can also make a histogram to explore the distribution of stopping distances:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(cars$dist)\n```\n\n::: {.cell-output-display}\n![](01-intro-lab_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nWhat does this tell you about car stopping distances? Is it clustered? Random? \n\n#### Wrangle\n\nMaybe we think that one really long distance is exceptional, perhaps owing to measurement error, and we want to remove it from our analysis. In that case, we want to _subset_ the data, including only distance values less than some amount, say 100 ft.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars <- subset(cars, dist < 100)\n```\n:::\n\n\nThis is data wrangling, preparing the data for analysis. \n\n#### Analyze\n\nNow, finally, we might want to answer our question directly by modeling the relationship between car speeds and stopping distances. Here, our hypothesis is that there is _no_ relationship. This is called the __null hypothesis__. If we can show that this hypothesis is very likely false, then we can with some confidence accept the __alternative hypothesis__, namely, that there _is_ a relationship. To test the null hypothesis, we can construct a simple linear model.  In R, we do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_model <- lm(dist ~ speed, data = cars)\n\nsummary(distance_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-26.789  -9.149  -1.672   8.013  43.048 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -14.0021     6.2951  -2.224    0.031 *  \nspeed         3.6396     0.3918   9.290 3.26e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 14.1 on 47 degrees of freedom\nMultiple R-squared:  0.6474,\tAdjusted R-squared:  0.6399 \nF-statistic: 86.31 on 1 and 47 DF,  p-value: 3.262e-12\n```\n:::\n:::\n\n\nWoah! That's a lot to digest. For now, just note that the asterisks (*) imply that that there is very likely a relationship between speed and distance. But, what is that relationship? Or, what does it look like? Well, let's try to visualize that in R, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  cars,\n  pch = 21,\n  bg = adjustcolor(\"gray\", 0.75),\n  col = \"gray25\",\n  cex = 1.5,\n  xlab = \"Speed (mph)\",\n  ylab = \"Distance (ft)\"\n)\n\nabline(\n  distance_model, \n  col = \"#A20000\",\n  lwd = 2\n)\n\ntitle(\n  \"Distance Model\",\n  line = 0.3, \n  adj = 0, \n  cex = 1.5\n)\n```\n\n::: {.cell-output-display}\n![](01-intro-lab_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n#### Export\n\nNow, if we feel it necessary, we can save our model, so we can inspect it again later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(distance_model, file = \"distance_model.Rds\")\n```\n:::\n\n\nAnd that's it! Now, all we have to do is write this up and publish it! Easy peasy.\n\n## R Projects \n\n[![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/cracked_setwd.png)](https://github.com/allisonhorst/stats-illustrations)\n\nYOU CANNOT EAT R CODE. Believe me. You can't. Eventually, you'll have to close out of R, turn off your computer, walk away, and do whatever it is that you do to maintain your existence. That means you need some way to save your progress and you need some place to save it. R has a few built-in tools for this, and they are really convenient, at least early on. However, you will be much better off if you get into the habit of using RStudio [Projects](https://support.rstudio.com/hc/en-us/articles/200526207-Using-RStudio-Projects). What is an R Project? Basically, it's a folder on your computer that you can use to organize all the data, code, figures, texts, and analyses associated with a single scientific research project. \n\nWhen you open your project in RStudio, it will establish your project folder as your working directory by default. The advantage of this is that you can access R scripts and data using relative file paths rather than specifying the full path from your computer's root directory. Why is this advantageous? Because you can copy the project folder to any computer you want and your relative file paths will just work!\n\n### Exercises\n\n1. Before we setup your project, let's turn off some of R's default settings.\n    - In RStudio, go to __Tools > Global Options...__.\n    - In the dialog box that appears, navigate to the General section, and under __Workspace__, make sure \"Restore .RData into workspace at startup\" is unchecked.\n    - Then, for \"Save workspace to .Rdata on exit\", select _Never_.\n    - Hit \"Apply\", then hit \"OK.\"  \n2. Now, we are going to create a new project for you for this class. You will use this folder to save all your lab and homework exercises, required datasets, and figures. To do that, follow these steps:\n    - In RStudio, go to __File > New Project...__.\n    - In the dialog box that appears, select __New Directory__, then __New Project__.\n    - Put \"qaad\" as the Directory name.\n    - Then Browse to a location on your computer where you would like to keep this project and hit \"OK.\"\n    - Make sure \"Create a git repository\" and \"Use renv with this project\" are unchecked.  \n    - Then click \"Create Project.\" This will restart RStudio with your project loaded. You can confirm this by looking at the top left of the RStudio window. It should say \"qaad - RStudio\" now. If you look in the File pane (bottom-right), you will also see a file called \"qaad.Rproj.\"\n3. Once you have your project folder setup, have a look at the Files pane again. You should see a button that says \"New Folder.\" Click that, and in the dialog box that appears, enter \"R\" and hit \"OK.\" You should now see a folder in your project directory called \"R.\" This is where you will keep all the files with your R code in it. Repeat this process to add \"data\", \"figures\", and \"_misc\" folders to your project. The \"_misc\" folder is short for miscellaneous. This folder is not strictly necessary but I find it helpful. It's like that drawer in the kitchen where random stuff goes. It might not be clean or orderly, but at least your kitchen is! \n4. Just to check that everything is working, minimize RStudio and navigate to the location of your R Project on your computer. Do you see the folders you have created and the \"qaad.Rproj\" file?\n\n## Quarto\n\n::: {#fig-quarto}\n[![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/c2ef45f1-4a68-4c7a-a43f-bdcf0f90e104_rw_1920.png?h=89c4f4138772e8b374e21a814cc91b2f)](https://allisonhorst.com/allison-horst)\n\nArtwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\n:::\n\nQuarto offers a unified framework for statistical programming and science communication by letting you write and run R code alongside text to explain your methods to others. The text you write is formatted using Markdown syntax (the same syntax you would use on, for example, a Reddit post). The basis for creating documents using Quarto is a test-based file format with the extension \".qmd\", short for Quarto Markdown. In just about every one of these documents you come across, you will find three major components: \n\n1. a __YAML header__ surrounded at the top and bottom by three hyphens, `---`, \n2. R code __chunks__ surrounded at the top and bottom by three back ticks, ```` ``` ````, and \n3. text formatted with __markdown syntax__ like `# heading 1` and `_italics_`. \n\nHere is an example:\n\n    ---\n    title: \"Week 01\"\n    author: \"Kenneth Blake Vernon\"\n    date: \"1/10/2023\"\n    format: html\n    execute:\n      echo: true\n    ---\n    \n    ## Lab Exercises\n    \n    ### Plot\n    \n    1. Complete the following line of code to preview only the first three rows of the `cars` table.\n    \n    ```{{r}}\n    \n    head(cars, n = )\n    \n    ```\n    \n    ***\n    \n    ## Homework Exercises\n    \n    1. \n\nLet's start with some simple markdown formatting and work our way back to the YAML.\n\n### Markdown formatting\n\nMarkdown is a lightweight markup language for formatting plain text and is designed to be easy to read and write. The markdown you will use most often includes all of the following (borrowed from [here](https://r4ds.had.co.nz/r-markdown.html#text-formatting-with-markdown):\n\n    Text formatting \n    ------------------------------------------------------------\n    \n    *italic*  or _italic_\n    **bold**   __bold__\n    `code`\n    superscript^2^ and subscript~2~\n    \n    Headings\n    ------------------------------------------------------------\n    \n    # 1st Level Header\n    \n    ## 2nd Level Header\n    \n    ### 3rd Level Header\n    \n    Lists\n    ------------------------------------------------------------\n    \n    *   Bulleted list item 1\n    \n    *   Bulleted list item 2\n    \n        * Nested list item 2a\n    \n        * Nested list item 2b\n    \n    1.  Numbered list item 1\n    \n    1.  Numbered list item 2. The numbers are incremented automatically in the output.\n    \n    1.  Numbered list item 3. \n    \n    Links and images\n    ------------------------------------------------------------\n    \n    <http://example.com>\n    \n    [linked phrase](http://example.com)\n    \n    ![optional caption text](path/to/img.png)\n\n\n### YAML\n\n'YAML' is a recursive acronym that means \"YAML Ain't Markup Language.\" You don't actually need to know that. I just think it's funny. The YAML controls features of the whole document, specifying, for instance, the title and author. It looks like this:\n\n    ---\n    title: \"Week 01\"\n    author: \"Kenneth Blake Vernon\"\n    date: \"1/11/2022\"\n    format: html\n    ---\n\nNotice the three dashes `---` at the top and bottom. These must be there in order for Quarto to recognize it as the YAML. You should always include this at the beginning of the document. There's A LOT you can specify in the YAML. In fact, you can specify basically anything you want, but being quite new to Quarto, I don't think that would be helpful. For now, let me draw your attention to the `format` field. Quarto (with the power of a utility known as Pandoc) can generate a wide variety of output formats, including Word documents, PDFs, revealjs slides (presentations, what the slides in tihs class are built with), and even Powerpoint (if you really insist on it). In this class, we'll stick with the default HTML output, so the only thing you will need to specify in the YAML is the title, author, and date. \n\nBy the way, the HTML output is the same stuff that a website is built on. In fact, when you open the resulting HTML file, it will open in your browser.\n\n### R code chunks\n\nAll R code that you want to run needs to be \"fenced\" by three back ticks ```` ``` ````. You also need to tell Quarto that it's R code and not, say, Python or SQL. To do that, you add `{r}` after the first set of back ticks. Altogether, it should look like this:\n\n\n    ```{{r}}\n    \n    1+1\n    \n    ```\n\n\nInstead of typing this every time, you can use `Ctrl + Alt + I` (or `CMD`) in RStudio, and it will automatically generate a code chunk in your qmd document. You can run the code in these chunks like you would code in an R script, by placing the cursor over it and hitting `Ctrl + Enter`. You can specify options for code chunks in R Markdown that will affect the way that they behave or are displayed. You can find a complete list of chunk options at <http://yihui.name/knitr/options/>. Here are a few examples:\n\n- `eval: false` prevents code from being evaluated. \n- `echo: false` hides the code but not the results of running the code. \n- `warning: false` prevents R messages and warnings from appearing in the knitted document.\n\nHere is how it would look to specify these in a code chunk:\n\n    ```{{r}}\n    #| echo: false\n    #| warning: false\n    \n    1+1\n    \n    ```\n\nYou can also set these globally, applying them to all code chunks, by specifying them in the `execute` field (for code execution) in the YAML at the top of your qmd document. It would look like this:\n\n    ---\n    title: \"Week 01\"\n    author: \"Kenneth Blake Vernon\"\n    date: \"1/11/2022\"\n    format: html\n    execute:\n      echo: false\n      warning: false\n    ---\n\nThere are loads more of these options, some of the more important ones involve figures you generate with these documents. Rather than overload you with all of those now, we'll try to go over some of those here or there in future labs and homework exercises.\n\n### Exercises\n\n1. Let's create a new qmd document in RStudio. To do that, follow these steps:\n   - Go to __File > New File > Quarto Document...__.\n   - In the dialog box that appears, put \"ANTH 5580 (QAAD) Week 01\" as the __Title__.\n   - Put your name as __Author__.\n   - Hit \"OK\".  \n2. RStudio will open a new qmd document for you. Notice that it sets up the YAML for you. Let's copy the template we will use for these course assignments. To do that, follow these steps:\n   - Scroll up to the section above with the example of a qmd document. You can now copy and paste this into your qmd document (I recommend typing it out by hand, so you can get a feel for it, but that's not necessary).\n3. Notice that this template has two level two headers, \"Lab Exercises\" and \"Homework Exercises.\" These are the two major assignments you will have to complete each week. You will enter all your answers in a qmd document with this format and submit it via Canvas. To make sure your code is actually working, you can \"render\" the document and see if it completes without error. This is partly what I will do each week when grading your assignments. To keep these things organized, each exercise section in the lab should have its own level three header, like `### Plot` for this week. Since there is no R related homework assignment for this week, you can just delete that section from this qmd document. Before continuing, save your qmd document to the R folder in your course project directory.\n4. Now, go back through this lab and re-do the exercises by adding them to this qmd document. Make sure to save that again, then submit it on the Canvas course page. Again, go ahead and render the document, too, just to make sure everything is working. This is the process that you will go through each week! \n\n## Homework \n\nThere is no R related homework assignment for this week. Please fill out the pre-course self-assessment survey on Canvas.",
    "supporting": [
      "01-intro-lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}