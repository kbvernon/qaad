{
  "hash": "499e039e22be4278c5fef0f2f0f92403",
  "result": {
    "markdown": "---\ntitle: \"Lab 07: Evaluating Linear Models\"\ndescription: |\n  (Stats) Learn how to interpret linear models, make predictions, and use standard tests and diagnostics for evaluation, including making diagnostic plots. \n  (R) Model summaries. Diagnostic plots. Prediction and plotting.\n---\n\n\n\n\n## Outline\n\n### Objectives\n\nThis lab will guide you through the process of  \n\n1. importing and exporting data tables\n2. Visualizing a linear model\n    - Using AB lines\n    - Using predictions\n    - Adding prediction and confidence intervals\n2. Evaluating a linear model\n    - interpreting model summaries in R\n    - t-tests\n    - ANOVA\n2. Diagnostic plots with `plot()` and `check_model()`\n    - Residual Histogram\n    - Raw Residuals v Fitted\n    - Standardized Residuals v Fitted\n    - Residuals v Leverage (and Cook's Distance)\n    - Q-Q Plot\n\n### R Packages\n\nWe will be using the following packages:\n\n- [archdata](https://cran.r-project.org/web/packages/archdata/index.html)\n- [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)\n- [performance](https://easystats.github.io/performance/)\n- [skimr](https://docs.ropensci.org/skimr/)\n- [tidyverse](https://www.tidyverse.org/)\n\nYou'll want to install `performance` with `install.packages(\"performance\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(archdata)\nlibrary(palmerpenguins)\nlibrary(performance)\nlibrary(skimr)\nlibrary(tidyverse)\n```\n:::\n\n    \n### Data\n\n- `cars`\n    - Includes measurements of car speed and stopping distance.\n    - package: `datasets`\n    - reference: <https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/cars.html>\n- `DartPoints`\n    - Includes measurements of 91 Archaic dart points recovered during surface surveys at Fort Hood, Texas.\n    - package: `archdata`\n    - reference: <https://cran.r-project.org/web/packages/archdata/archdata.pdf>\n- `OxfordPots`\n    - Includes percentages of late Romano-British Oxford Pottery on 30 sites, along with their distance from Oxford.\n    - reference: <https://cran.r-project.org/web/packages/archdata/archdata.pdf>\n- `penguins` \n    - Includes measurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex. \n    - package: `palmerpenguins`\n    - reference: <https://allisonhorst.github.io/palmerpenguins/reference/penguins.html>\n\n## Read/Write Data\n\n::: {#fig-table style=\"text-align:center;\"}\n![](images/r-tables.png){width=\"75%\" fig-align=\"center\"}\n\nElements of a Data Frame.\n:::\n\n\nThis sections covers how to import data into and export data out of R, with a focus on rectangular data or tables. While many formats exist for representing rectangular data in plain-text file, the most common is perhaps common-separated values. You can spot this format by looking for files on your computer with the _.csv_ extension. If we had saved the data represented in @fig-table to a csv file, the plain text of that file would look like this:\n\n```md\ntype, length, width, height\nElko, 2.03, 0.8, 3.23 \nRosegate, 1.4, 0.4, 2.4\nDSN, 1.9, 0.3, 1.29\nElko, 2.1, 0.7, 2.7\nClovis, 3.3, 0.95, 4.15 \n```\n\nwith the first row typically assumed to contain the column names, also known as the header. To prove this to yourself, you can open a .csv file using a text editor like Notepad. \n\nBase R provides two functions for reading and writing these sorts of files: `read.csv()` and `write.csv()`. These have some unfortunate default behavior, however, so we are going to focus on their tidyverse equivalents. Those are `read_csv()` and `write_csv()` from the `readr` package. There are three main differences between these functions: \n\n1. the tidy functions cannot be used without loading `readr`,\n2. `read_csv()` reads the data in as a tibble rather than a data.frame ,and \n2. `write_csv()` does not by default add a column with row names or row ids to the exported csv file. \n(1) is a cost of doing business, but (2) and (3) more than make up for that. \n\n### File Paths\n\nTo read and write data into R, you have to point R to where that data lives on your computer, meaning you have to specify a path to the file that holds the data. Suppose, for example, the penguins.csv file lives on Leslie Knope's computer in this location:\n\n```\nC:/Users/Leslie_Knope/qaad-course/data/penguins.csv\n```\n\nThis is a file path. The \"/\" denotes containment, meaning the thing to the right is within the thing to the left, so the penguins.csv file is in the data folder, which is in the qaad-course folder, which is in the Leslie_Knope folder, which is in the Users folder, which is in the C: folder. I have called them \"folders\" here, of course, but you will also often hear them referred to as \"directories.\" \n\nTo read the penguins data into R from the location specified by this file path, you simply feed the file path as a character string to `read_csv()` like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- read_csv(\"C:/Users/Leslie_Knope/qaad-course/data/penguins.csv\")\n\n```\n:::\n\n\nNote that you will usually want to assign the table to an object, so that you can reference it later on during your R session. \n\nIf you have the data in R and you want to write to this location, it works much the same way. The only difference is that you have to tell `write_csv()` what table you are wanting to write to disc, hence:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(penguins, \"C:/Users/Leslie_Knope/qaad-course/data/penguins.csv\")\n\n```\n:::\n\n\n### Absolute v Relative Paths\n\nThe path listed above is known as an __absolute__ path because it starts at the top most directory in the file path, namely \"C:\", and works out from there to the exact location of the file. This top level directory is also known as the root directory. That's \"C:\" for Windows systems. For MacOS the root is, well, \"root\". \n\nWhenever you open R, your session happens somewhere on your computer, meaning it has some sense of its location within your file system. This is known as the __working directory__. For instance, when Leslie opens an R session, it might open in her \"qaad-course\" folder. The location of her working directory is, thus, \"C:/Users/Leslie_Knope/qaad-course.\" Because of this, she does not have to specify the entire file path to the penguins file. All she needs to specify is \"data/penguins.csv,\" as in `read_csv(\"data/penguins.csv\")`. This is known as a __relative__ file path, as it is relative to the working directory.\n\nOf course, R doesn't just open anywhere on your computer. By default, it will always open in the same place (usually the Documents folder on Windows). But you can then point it to a specific directory on your computer where you would like to work. The traditional way of doing this is with the function `setwd()`, as in \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Users/Leslie_Knope/qaad-course/data/penguins.csv\")\n\n```\n:::\n\n\nThis is a brittle method, however, as it requires specifying the working directory using an absolute file path. So, if Leslie changes the location of qaad-course on her computer, if she moves it to, say, the parks-and-rec folder, it will no longer work. And, if Leslie wants to share her qaad-course folder - all the work and data and R code - with someone else, so they save that folder onto their own computer, again the call to `setwd()` with the absolute path will not work. The actual path could be \"C:/Users/Gerry/...\" or \"C:/Users/Jerry/...\" or something to that effect, and yet the call to `setwd()` uses \"C:/Users/Leslie_Knope/...\". \n\nThe alternative to setting the working directory with `setwd()` is to use R projects. Fortunately, you have already done this for this class! Whenever you open an R project, the R session will automatically be set to the directory where that R project lives, whether that is on Leslie's computer or Gerry's or Andy's or April's. Doesn't matter. Then you can use relative paths as you please, as long as you keep all the necessary data and code together in that project folder, which is what you should do!   \n\nThere are some extra advantages to using projects, but we'll leave it at that for now.\n\n### Exercises\n\n1. Make sure your working directory is set to the R project folder for the course!\n2. Use `write_csv()` to write the `cars` data to a file called _cars.csv_ in your project's _data_ folder.\n3. Remove the cars data from your environment with `remove(cars)`. If you look in the environment pane of RStudio (in the top right corner), you should see that the `cars` table has been removed.\n3. Now read _cars.csv_ back into R with `read_csv()` and assign it to `cars`. Check to make sure the table is back in your environment.\n\n## Visualize Model\n\nHere we are going to use ordinary least squares to build a simple linear model of penguin bill length as a function of flipper length. To aid in the interpretation of this model, it is useful to visualize the relationship or trend it suggests (if it does suggest one!). Before building that model, however, you should, as always, make sure to visualize your data! In this case, we make a simple scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean up data, remove rows with missing data\npenguins <- na.omit(penguins)\n\nggplot(penguins, aes(flipper_length_mm, bill_length_mm)) +\n  geom_point(size = 2) +\n  labs(\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-6-1.png){width=480}\n:::\n:::\n\n\nWhat is the relationship here? Let's see if a linear model can help us out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_model <- lm(bill_length_mm ~ flipper_length_mm, data = penguins)\n\nsummary(penguins_model)\n#> \n#> Call:\n#> lm(formula = bill_length_mm ~ flipper_length_mm, data = penguins)\n#> \n#> Residuals:\n#>    Min     1Q Median     3Q    Max \n#> -8.637 -2.698 -0.579  2.066 19.095 \n#> \n#> Coefficients:\n#>                   Estimate Std. Error t value            Pr(>|t|)    \n#> (Intercept)        -7.2186     3.2717   -2.21               0.028 *  \n#> flipper_length_mm   0.2548     0.0162   15.69 <0.0000000000000002 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 4.15 on 331 degrees of freedom\n#> Multiple R-squared:  0.427,\tAdjusted R-squared:  0.425 \n#> F-statistic:  246 on 1 and 331 DF,  p-value: <0.0000000000000002\n```\n:::\n\n\nThere are two ways to visualize this model:  \n\n1. With __abline__. Use the estimated coefficients (the slope and intercept) to construct a formula that will calculate values of y across the range of x. The formula has the form: $y \\sim a + bx$, where is $a$ is the intercept and $b$ is the slope, hence _abline_.\n2. With __predict__. Use the model to estimate values of $y$ for specified values of $x$ and construct a line from those values.\n\nOK. There's actually three ways to do it. The most direct way that `ggplot()` offers uses `geom_smooth()`, but we'll save that one for another time. The point here isn't just to learn how to visualize a linear model, but to learn what it is that we are visualizing and what it means. So, let's try an example of each, so you can get a feel for how to do this.\n\n### ABline\n\n`ggplot()` has a geometry for plotting AB lines. As you might have guessed, it's `geom_abline()`. All we need to do is extract the values of the coefficients from the model and feed these to the `slope` and `intercept` parameters, respectively. To do that, we will use the `coefficients()` function. This provides a named vector that we can use to get our estimates. Notice that we use `<vector>[[<variable]]` like we do with tables, only this time we are extracting a single value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbetas <- coefficients(penguins_model)\n\nbetas\n#>       (Intercept) flipper_length_mm \n#>            -7.219             0.255\n\nintercept <- betas[[\"(Intercept)\"]]\nslope <- betas[[\"flipper_length_mm\"]]\n```\n:::\n\n\nNow, we can plot our model over the data. This is always useful, as you can see how the model compares to the actual observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(flipper_length_mm, bill_length_mm)) +\n  geom_point(size = 2) +\n  labs(\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  ) +\n  theme_minimal() +\n  geom_abline(\n    slope = slope,\n    intercept = intercept,\n    color = \"darkred\",\n    linewidth = 1\n  )\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-9-1.png){width=480}\n:::\n:::\n\n\nWith this method, we simply supply the coefficients. `ggplot()` then uses those to estimate values of y for each value of x shown within the range of x represented by the plot. Notice that the line continues across the full range of the graph. This shows that the model assumes the relationship is _linear_, meaning in this case that it will always increase to the right (to infinity) and always decrease to the left (to negative infinity)\n\n### Predict\n\nWe can also generate values of y manually with the `predict()` function. The key here is to supply it with our model, which it will then use to make predictions. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins |> mutate(estimates = predict(penguins_model))\n\nggplot(penguins) +\n  geom_point(\n    aes(flipper_length_mm, bill_length_mm),\n    size = 2\n  ) +\n  labs(\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  ) +\n  theme_minimal() +\n  geom_line(\n    aes(flipper_length_mm, estimates),\n    color = \"darkred\",\n    size = 1\n  )\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-10-1.png){width=480}\n:::\n:::\n\n\nThis is very similar to our abline graph above, but with the important difference that the trend line or modeled relationship does not extend across the entire graph. \n\nNote that you can use `predict()` to estimate the value of the response at specific values of the independent variable. To do that, you simply feed the `predict()` function, specifically its `newdata` parameter, a table with the values of the independent variable that interest you. For example, suppose you wanted to know what bill length this model would expect for a penguin having a body mass of, say, 4,500 grams. We can figure that out this way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data <- tibble(flipper_length_mm = 200)\n\npredict(penguins_model, newdata = new_data)\n#>    1 \n#> 43.7\n```\n:::\n\n\nIf you like, you can also do that for multiple values like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_data <- tibble(flipper_length_mm = c(190, 195, 200, 205))\n\npredict(penguins_model, newdata = new_data)\n#>    1    2    3    4 \n#> 41.2 42.5 43.7 45.0\n```\n:::\n\n\n### Intervals\n\nYou can use `predict()` to calculate the prediction interval for these estimates by specifying `interval = \"prediction\"`. Note, too, that we ask it to provide that interval at `level = 0.95` to ensure the prediction interval is estimated at the 95% level. Recall that this is the interval within which we expect the value of Y to fall with 95% probability for each value of X. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(\n  penguins_model, \n  newdata = new_data,\n  interval = \"prediction\",\n  level = 0.95\n)\n#>    fit  lwr  upr\n#> 1 41.2 33.0 49.4\n#> 2 42.5 34.3 50.6\n#> 3 43.7 35.6 51.9\n#> 4 45.0 36.8 53.2\n```\n:::\n\n\nIf we set `interval = \"confidence\"`, we can get the confidence interval, or the interval within which we expect the _average_ value of Y to fall with 95% probability for each value of X.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(\n  penguins_model, \n  newdata = new_data,\n  interval = \"confidence\",\n  level = 0.95\n)\n#>    fit  lwr  upr\n#> 1 41.2 40.6 41.8\n#> 2 42.5 42.0 43.0\n#> 3 43.7 43.3 44.2\n#> 4 45.0 44.6 45.5\n```\n:::\n\n\nWe can actually add these to our model using the function `geom_ribbon()` like so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nconfidence <- predict(\n  penguins_model, \n  interval = \"confidence\",\n  level = 0.95\n)\n\n# coerce to a table\nconfidence <- as_tibble(confidence)\n\n# add the X values\nconfidence <- confidence |> mutate(flipper_length_mm = penguins$flipper_length_mm)\n\nggplot() +\n  geom_ribbon(\n    data = confidence,\n    aes(x = flipper_length_mm, ymin = lwr, ymax = upr),\n    fill = \"gray85\"\n  ) +\n  geom_line(\n    data = confidence, \n    aes(flipper_length_mm, fit),\n    color = \"darkred\",\n    linewidth = 1\n  ) +\n  geom_point(\n    data = penguins,\n    aes(flipper_length_mm, bill_length_mm),\n    size = 2\n  ) +\n  theme_minimal() +\n  labs(\n    x = \"Flipper Length (mm)\",\n    y = \"Bill Length (mm)\"\n  )\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-15-1.png){width=480}\n:::\n:::\n\n\nThe ribbon geometry is, in effect, a polygon defined by an upper and lower line (`ymax` and `ymin`, respectively). Note that we added the ribbon before adding the trend line. If we did the reverse, the ribbon would be plotted over the trend line, thus obscuring it.\n\n### Exercises\n\n1. Build a model of penguin flipper length by body mass.\n    - Make sure to visualize your data first! Make a scatter plot!\n2. Now plot the modeled relationship between flipper length and body mass.\n    - Use `coefficients()` and `geom_abline()`.\n    - Use `predict()` and `geom_line()`.\n    - Add the confidence interval to the second plot using `geom_ribbon()`.\n\n## Model Summary\n\nLet's return to the `summary()` of our model and discuss it in a little more detail.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(penguins_model)\n#> \n#> Call:\n#> lm(formula = bill_length_mm ~ flipper_length_mm, data = penguins)\n#> \n#> Residuals:\n#>    Min     1Q Median     3Q    Max \n#> -8.637 -2.698 -0.579  2.066 19.095 \n#> \n#> Coefficients:\n#>                   Estimate Std. Error t value            Pr(>|t|)    \n#> (Intercept)        -7.2186     3.2717   -2.21               0.028 *  \n#> flipper_length_mm   0.2548     0.0162   15.69 <0.0000000000000002 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 4.15 on 331 degrees of freedom\n#> Multiple R-squared:  0.427,\tAdjusted R-squared:  0.425 \n#> F-statistic:  246 on 1 and 331 DF,  p-value: <0.0000000000000002\n```\n:::\n\n\nThere are four major components of the summary: (i) the function call, (ii) the residual distribution, (iii) the coefficients table, and (iv) the summary statistics. Let's work through each one of these separately.\n\n__The Call.__ This refers to your \"call\" to the `lm()` function, which includes the model specification (meaning, the formula used to specify the model) and the data used to fit that model specification.\n\n__The Residual Distribution.__ This refers to the distribution of the residuals, here represented using quartiles and the minimum and maximum values. You can visualize the quartiles for the residuals really quickly with a boxplot.\n\n\n::: {.cell fig.asp='1'}\n\n```{.r .cell-code}\nboxplot(residuals(penguins_model), ylab = \"Raw Residuals\")\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-17-1.png){width=480}\n:::\n:::\n\n\nThe thing to keep in mind here is that the linear model fit with OLS assumes that the residuals are normally distributed, $\\epsilon \\approx N(0, \\sigma)$ with a mean of zero and standard deviation, $\\sigma$. Crucially, in a normal distribution, the median value is equal to the mean. In the boxplot, that means the dark line representing the median should be really close to zero. The first and third quartiles should also be equidistant from the median. In the boxplot, that means the median bar should be about halfway between top (3Q) and bottom (1Q) of the box. If it's not, that means your residuals are not normally distributed. The minimum and maximum values kinda have this flavor, but not to the same degree. \n\n__The Coefficients Table.__ The number of rows in the coefficients table is equal to the number of variables in the model specification plus one. In this case, that's two rows, one for the intercept and one for the flipper length variable. There are also five columns, one for the variables and the other four listing their coefficient estimates, the standard errors of those estimates, the t-statistics associated with the estimates, and the p-values for those t-statistics. If you just want the coefficients, as noted above, you can use the `coefficients()` function to get them. You can also get the variable names with `variable.names()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable.names(penguins_model)\n#> [1] \"(Intercept)\"       \"flipper_length_mm\"\n\ncoefficients(penguins_model)\n#>       (Intercept) flipper_length_mm \n#>            -7.219             0.255\n```\n:::\n\n\nNote that the t-statistic is just the ratio of the coefficient estimate to its standard error:\n\n$$t = \\frac{\\beta_i}{se(\\beta_i)}$$\n\nIf you multiply the standard error of the coefficients by $\\pm$1.96, you get the 95% confidence interval for the coefficient estimate. You can extract these confidence intervals from the linear model with the `confint()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(penguins_model)\n#>                     2.5 % 97.5 %\n#> (Intercept)       -13.655 -0.783\n#> flipper_length_mm   0.223  0.287\n```\n:::\n\n\nYou can also visualize those intervals using a dot and whisker plot using `geom_errorbar()` like so:\n\n\n::: {.cell fig.asp='0.5'}\n\n```{.r .cell-code}\n# getting the standard errors is a smidge awkward\nbetas <- tibble(\n  x = coefficients(penguins_model),\n  y = variable.names(penguins_model),\n  se = coefficients(summary(penguins_model))[, \"Std. Error\"]\n)\n\nggplot(betas, aes(x, y)) +\n  geom_vline(\n    xintercept = 0, \n    linewidth = 1, \n    color = \"darkred\"\n  ) +\n  geom_point(size = 3) +\n  geom_errorbar(\n    aes(xmin = x - (1.96*se), xmax = x + (1.96*se)),\n    width = 0.33 # height of whiskers\n  ) +\n  labs(\n    x = \"Estimate\",\n    y = NULL,\n    title = \"Model Coefficients\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-20-1.png){width=576}\n:::\n:::\n\n\nTwo things to note here. First, the width of the confidence interval tells you something about how certain we are about the estimate, wider intervals mean less certainty, narrow intervals more certainty. Second, you can visually inspect whether the 95% confidence intervals overlap with zero. In this case, they do not. This tells you that it is extremely improbable that the coefficients could equal zero, since there is only a 2.5% chance or less of the coefficient being zero for each estimate. So, the dot and whisker plot with the coefficient estimates and their standard errors is effectively a visual representation of the t-test.\n\n__Summary statistics.__ The last element of the `summary()` is a set of statistics. This includes the __residual standard error__ or the standard deviation in the error. The formula for this statistic is\n\n$$\n\\begin{aligned}\n\\sigma^2_\\epsilon &= \\frac{1}{n-k}\\sum \\epsilon^2 \\\\\nse_\\epsilon &= \\sqrt{\\sigma^2}\n\\end{aligned}\n$$\nwhere $n-k$ is the degrees of freedom, in this case the number of observation $n$ minus the number of model parameters $k$ (meaning $\\beta_0$ and $\\beta_1$). In R, you can calculate this standard error like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne <- residuals(penguins_model)\ndf <- summary(penguins_model)$df[2]\n\nsqrt(sum(e^2)/df)\n#> [1] 4.15\n```\n:::\n\n\nThe set of summary statistics for a linear model also includes the __R-squared__ value, which - if you recall - is the ratio of the Model Sum of Squares $SS_M$ to the Total Sum of Squares $SS_T$ (defined by the null or intercept-only model). This provides a measure of the proportion of the total variance explained by the model. You will also see here the so-called _Adjusted_ R-squared. This is simply the R-squared statistic weighted by the complexity of the model, which is important because R-squared tends to increase with increases in model complexity, meaning each time you add an independent variable to a model it's going to capture some amount of the total variance in the dependent variable. \n\nFinally, there is the F-statistic, which is similar to the R-squared value, but is estimated by the ratio of the model variance to the residual variance. The p-value is obtained by comparing the F-statistic to the F-distribution with $k-1=1$ and $n-k=331$ degrees of freedom. These are the summary statistics provided by the ANOVA, so let's dive into that in the next section. \n\n### Exercises\n\n1. Build a model of penguin flipper length by body mass.\n    - Make sure to visualize your data first! Make a scatter plot!\n2. Run `summary()` on your model.\n    - Do the residuals appear to be normally distributed?\n    - What is the R-Squared value? \n    - Does body mass explain much of the variance in flipper length?\n    - How would you interpret this result? What is the relationship between flipper length and body mass?\n\n## ANOVA\n\nA really powerful way to evaluate a linear model is to submit it to an ANOVA test. If you recall, an ANOVA for comparing the distribution of a variable across groups compares the ratio of the between-group variance to the within-group variance. This is known as an F-statistic. It gives us a sense of how much variance is coming from the groups themselves versus how much is coming from the individual observations within each group. If more of the variance is coming from the groups and not the individual observations, that indicates that at least one of the groups is not like the others. Crucially, the F-statistic can be compared to an F-distribution to determine whether the statistic is likely under the null hypothesis that the groups are not different. \n\nAn ANOVA applied to a statistical model works in much the same way. The only catch is that we are not comparing the variance between groups but between models. More precisely, we are comparing the variance captured by the model to the remaining or residual variance. That is,\n\n$$F = \\frac{\\text{model variance}}{\\text{residual variance}}$$\n\nwhere model variance is equal to $SS_M/k$ and residual variance is equal to $SS_R/(n-k-1)$ (or the square of the residual standard error). The sum of these two squared errors ($SS_M$ and $SS_R$) is actually the total sum of squares $SS_T$, which is defined by the mean or intercept-only model (sometimes referred to as the null model). Because the model includes at least one more parameter than the null model, an ANOVA applied to such a model can be thought of as answering the following  \n\n__Question:__ does the model capture a sufficient amount of the variance to make its increased complexity worthwhile?  \n\nAgain, taking the ratio of the variance explained by the model to the residual variance provides an estimate of the F-statistic, which can be compared to the F-distribution to determine how likely it is under the null hypothesis that the more complex model does not explain more variance than the null model.\n\nTo conduct this test in R, it's quite simple. Simply supply a fitted linear model to the `aov()` function. First, however, make sure to visualize your data! Note that summarizing the ANOVA with `summary()` prints an ANOVA table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_model_anova <- aov(penguins_model)\n\nsummary(penguins_model_anova)\n#>                    Df Sum Sq Mean Sq F value              Pr(>F)    \n#> flipper_length_mm   1   4235    4235     246 <0.0000000000000002 ***\n#> Residuals         331   5694      17                                \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n\nThe Mean Squared Error (`Mean Sq`) is calculated by dividing the Sum of Squares (`Sum Sq`) by the degrees of freedom (`Df`), the latter being a function of the number of independent variables or predictors in the model and the number of observations. MSE is, thus, another way of referring to the model and residual variance. The F-statistic is then calculated by dividing the Model variance or MSE (in this case `flipper_length_mm`) by the Residual variance or MSE (`Residuals`), in this case $F = 4235/17 = 246.2$. By comparing this statistic to an F-distribution with those degrees of freedom, we get a very small p-value, much less than the standard critical value of 0.05. We can thus reject the null hypothesis and conclude that the variance explained by this model is indeed worth the price of increased complexity.  \n\n### Exercises\n\n1. Use `aov()` to conduct an ANOVA on the penguins model you created in the previous section.\n    - Be sure to state your null and alternative hypotheses.\n    - Specify your critical value, too.\n2. Summarize the penguins model again.\n2. Now summarize the ANOVA with `summary()`.\n    - Does the model provide a significant improvement over the null model?\n    - Did you get the same F-statistic and p-value as in the model summary?\n    \n## Diagnostic Plots\n\nWhenever you build a model, it is critically important to visualize the model and its assumptions as this will give you some indication about whether those assumptions have been met. Here, we'll visualize our penguins model, starting with the residuals.\n\n### Residuals\n\nOne important assumption of OLS regression is that the errors are normally distributed. A simple histogram of the residuals will give us some indication of that. To get the residuals in our model, we can use the `residuals()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_fit <- tibble(residuals = residuals(penguins_model))\n\nggplot(penguin_fit, aes(residuals)) +\n  geom_histogram() +\n  labs(\n    x = \"Residual Bill Length (mm)\",\n    y = \"Count\"\n  )\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-23-1.png){width=480}\n:::\n:::\n\n\nDo these look normally distributed to you? Do they have the approximate shape of a bell curve? If a visual check does not suffice, you can always try a Shapiro-Wilk test for normality. To do that in R, you can use the `shapiro.test()` function. Note that the null hypothesis for this test is that the variable is _not_ normally distributed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(residuals(penguins_model))\n#> \n#> \tShapiro-Wilk normality test\n#> \n#> data:  residuals(penguins_model)\n#> W = 1, p-value = 0.00000005\n```\n:::\n\n\n### Additional Diagnostics\n\nBase R provides a really useful `plot()` method for linear models. You just feed this function your linear model and tell it `which` kind of plot you want to make. Here is a list of options, which you can supply to the `which` parameter:\n\n1. Residuals vs Fitted plot\n2. Normal Q-Q\n3. Scale-Location\n4. Cook's Distance\n5. Residuals vs Leverage\n6. Cook's Distance vs Leverage\n\nHere is an example of the Q-Q Plot for our penguins model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(penguins_model, which = 2)\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-25-1.png){width=480}\n:::\n:::\n\n\nThe `plot()` function in this case is extremely utilitarian. If you just want a quick visual diagnostic for your own edification, I recommend using this. However, if you want to present all these plots together in a clean way that easily communicates the assumptions being tested by each, I recommend using the `check_model()` function from the `performance` package.\n\n\n::: {.cell fig.asp='1'}\n\n```{.r .cell-code}\ncheck_model(\n  penguins_model, \n  check = c(\"linearity\", \"homogeneity\", \"outliers\", \"qq\")\n)\n```\n\n::: {.cell-output-display}\n![](07-evaluation-lab_files/figure-html/unnamed-chunk-26-1.png){width=100%}\n:::\n:::\n\n\nWith this, we can hazard all the following conclusions:\n\n1. The relationship is roughly linear, though you can see some wiggle.\n2. The model departs from homoscedasticity.\n3. No observations have an undue influence on the model. \n4. Looks like the residuals might be right skewed. (compare to histogram above)\n\nNote that none of the assumptions are met perfectly. This will never be the case, not with real world data. It should also clue you in to the fact that model evaluation is never certain. It always involves some risks that you might be wrong about your model.\n\n### Exercises\n\n1. Extract the residuals from your model of flipper length by body mass and visualize their distribution with a histogram.\n    - Do the residuals look normally distributed?\n    - Use the Shapiro Wilk test to verify this.\n3. Explore the model with base `plot()`.\n4. Now, use `check_model()`.\n    - What do these plots tell you about the model?\n\n## Homework\n\n1. Load the following datasets from the `archdata` package using `data()`.\n    - `DartPoints`\n    - `OxfordPots`\n2. Practice writing these to disc and reading them back into R.\n    - For each dataset, use `write_csv()` to write the table to a csv file. Put it in the data folder in your QAAD course project folder!\n    - Remove the table from your environment with `remove()`, e.g., `remove(DartPoints)`. (This is just so you can see it returning to your environment in the next step, but also to practice using `remove()`.)\n    - Read the table back into R with `read_csv()`. Make sure to assign it to an object! A good idea is to avoid using upper-case letters as much as possible!\n2. Using the `DartPoints` dataset, build a linear model showing the relationship (if any) between the length and width of dart points. Be sure to do all of the following:\n    - Use `skim()` to quickly summarize your data.\n    - Visualize the data with a scatter plot!\n    - State your null and alternative hypotheses.\n    - Build a model with `lm()`.\n    - Use `summary()` to report the model. \n    - Does the model refute the null hypothesis?\n    - Conduct an ANOVA of the model with `aov()`.\n    - Use `summary()` to print the ANOVA table.\n    - Use `coefficients()` and `geom_abline()` to visualize the modeled relationship. Be sure to plot this over the data!\n    - Add a confidence interval with `geom_ribbon()`.\n    - Use `check_model()` to visually inspect the model.\n    - Does the model satisfy the assumptions of linear regression?\n2. Using the `OxfordPots` dataset, build a linear model showing the relationship (if any) between the percentage of Oxford Pots found on an archaeological site and the distance of that site from the city of Oxford. Be sure to do all of the following:\n    - Use `skim()` to quickly summarize your data.\n    - Visualize the data with a scatter plot!\n    - State your null and alternative hypotheses.\n    - Build a model with `lm()`.\n    - Use `summary()` to report the model. \n    - Does the model refute the null hypothesis?\n    - Conduct an ANOVA of this with `aov()`.\n    - Use `summary()` to print the ANOVA table.\n    - Use `predict()` and `geom_line()` to visualize the modeled relationship. Be sure to plot this over the data!\n    - Add a confidence interval with `geom_ribbon()`.\n    - Use `check_model()` to visually inspect the model.\n    - Does the model satisfy the assumptions of linear regression?",
    "supporting": [
      "07-evaluation-lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}