{
  "hash": "9dfc5152adec8bd6f684f6f570a89bfd",
  "result": {
    "markdown": "---\ntitle: \"Lab 04: Ordinary Least Squares\"\ndescription: \"Calculating and testing bivariate statistics, including correlation and covariance. Visualizing probability densities. Fitting linear models using ordinary least squares. And some simple table indexing in R.\"\n---\n\n\n\n\n## Outline\n\n### Objectives\n\nThis lab will guide you through the process of  \n\n1. indexing data.frames with base R\n2. visualizing distributions with density plots\n2. calculating covariance\n2. calculating correlation and evaluating with the t-test\n2. building a simple linear model\n    - the formula notation\n    - the `lm()` function\n    - the model `summary()`\n\n### R Packages\n\nWe will be using the following packages:\n\n- [archdata](https://cran.r-project.org/web/packages/archdata/index.html)\n- [ggplot2](https://ggplot2.tidyverse.org/index.html)\n- [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/)\n- [viridis](https://sjmgarnier.github.io/viridis/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(archdata)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(viridis)\n```\n:::\n\n\n### Data\n\n- `cars`\n    - Includes measurements of car speed and stopping distance.\n    - package: `datasets`\n    - reference: <https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/cars.html>\n- `DartPoints`\n    - Includes measurements of 91 Archaic dart points recovered during surface surveys at Fort Hood, Texas.\n    - package: `archdata`\n    - reference: <https://cran.r-project.org/web/packages/archdata/archdata.pdf>\n- `OxfordPots`\n    - Includes percentages of late Romano-British Oxford Pottery on 30 sites, along with their distance from Oxford.\n    - reference: <https://cran.r-project.org/web/packages/archdata/archdata.pdf>\n- `penguins` \n    - Includes measurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex. \n    - package: `palmerpenguins`\n    - reference: <https://allisonhorst.github.io/palmerpenguins/reference/penguins.html>\n- `titanic`\n    - Provides information on the fate of passengers of the Titanic, including economic status, sex, age, and survival.\n    - package: none\n    - reference: <https://wilkelab.org/SDS375/>\n    - note: we're going to download this one rather than get it from a package\n\n## Indexing tables with base R\n\n::: {#fig-table style=\"text-align:center;\"}\n![](images/r-tables.png){width=\"75%\" fig-align=\"center\"}\n\nElements of a Data Frame.\n:::\n\nIt will often be the case that you do not need all the data in a table, but only a subset of rows and columns. To get the rows and columns you want, though, you need to be able to, as it were, point to them or point R to them. Another word for this is _indexing_. \n\nLet's start with the use of square brackets, `[,]`. The basic idea here is that you can take a table and index it by row and column by appending the square brackets to it. The basic syntax is this:\n\n```r\ntable[row,column]\n```\n\nAs an example, let's say we are working with our simple projectile point table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles <- data.frame(\n  type = c(\"Elko\", \"Rosegate\", \"DSN\", \"Elko\", \"Clovis\"),\n  length = c(2.03, 1.4, 1.9, 2.1, 3.3),\n  width = c(0.8, 0.4, 0.3, 0.7, 0.95),\n  height = c(3.23, 2.4, 1.29, 2.7, 4.15)\n)\n\nprojectiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      type length width height\n1     Elko   2.03  0.80   3.23\n2 Rosegate   1.40  0.40   2.40\n3      DSN   1.90  0.30   1.29\n4     Elko   2.10  0.70   2.70\n5   Clovis   3.30  0.95   4.15\n```\n:::\n:::\n\n\nAnd maybe we want the value at the 3rd row and 2nd column, so we're wanting the length of that particular desert side-notched (or DSN). Here is one way to do that with just the numeric position (or coordinates) of that value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[3,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.9\n```\n:::\n:::\n\n\nWhile we did specify both a row and a column in this example, that is not required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[3,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  type length width height\n3  DSN    1.9   0.3   1.29\n```\n:::\n\n```{.r .cell-code}\nprojectiles[,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.03 1.40 1.90 2.10 3.30\n```\n:::\n:::\n\n\n::: {.callout-caution collapse=true}\n\nDid you notice the different outputs? `projectiles[3,]` returns a data.frame, but `projectiles[,2]` returns a vector. This is a \"gotcha\" in R, a little bit of unexpected behavior. The most common situation in which indexing returns a vector from a data.frame is when a single variable is selected. Sometimes getting just the variable is intentional (see below), but other times it is not, so it's worth being aware of.  \n\n:::\n\nWe can also subset multiple rows and columns, though this requires that we use vectors of data, and not just single values. A useful tool in this regard is the colon, `:`, which allows you to create a sequence of integers, starting with the number on the left and proceeding by one to the number on the right.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n\n\nNow, we can use this syntax to index the last four rows of our table and the first three columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[2:5, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      type length width\n2 Rosegate    1.4  0.40\n3      DSN    1.9  0.30\n4     Elko    2.1  0.70\n5   Clovis    3.3  0.95\n```\n:::\n:::\n\n\nIf we want to get rows or columns that are not next to each other in the table, we can use the `c()` function, as in concatenate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4\n```\n:::\n:::\n\n\nWhen applied to the projectiles table, we get the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[c(2,4), c(1,2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      type length height\n2 Rosegate    1.4    2.4\n4     Elko    2.1    2.7\n```\n:::\n:::\n\n\nImportantly, you can also index columns by name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[1:3, c(\"type\", \"length\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      type length\n1     Elko   2.03\n2 Rosegate   1.40\n3      DSN   1.90\n```\n:::\n:::\n\n\nOne advantage of using names rather than numbers is that it is much more readable as it is not immediately obvious with numbers what columns you are actually selecting. More importantly, though, using names is more robust. Were the length column for whatever reason to move to the right of the height column, its numeric position in the table would be 4, not 2. So, using `projectiles[,2]` will work to index the length variable only if length is at that position. Using `projectiles[,\"length\"]` to index it will work either way, though, regardless of the numeric position of that variable.\n\nSo, that's pretty much the basics of indexing rectangular data with base R. Before moving on, though, let's talk about one additional thing you might want to do with a data.frame, and that's extract an entire variable or column. There are two primary ways to achieve this. You can use double brackets, `<table>[[<variable>]]`, or you can use the dollar-sign operator, `<table>$<variable>`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles[[\"type\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Elko\"     \"Rosegate\" \"DSN\"      \"Elko\"     \"Clovis\"  \n```\n:::\n\n```{.r .cell-code}\nprojectiles$length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.03 1.40 1.90 2.10 3.30\n```\n:::\n:::\n\n\nNote that you can and often will want to assign these to their own objects, so you can use them again later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_type <- projectiles[[\"type\"]]\n\np_length <- projectiles$length\n```\n:::\n\n\nAnd, if you want, you can index specific values in the vector as you would rows in the table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojectiles$length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.03 1.40 1.90 2.10 3.30\n```\n:::\n\n```{.r .cell-code}\nprojectiles$length[c(1,2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.03 1.40 2.10\n```\n:::\n:::\n\n\n### Exercises\n\n1. Get the names of the variables in the `penguins` table with `names()`.\n2. How many observations and variables are in this dataset? Hint: use `nrow()` and `ncol()`.\n2. Try indexing multiple rows and columns of the penguins data using the square brackets with row numbers and column names, for example, `penguins[1:25, c(\"species\", \"island\", \"body_mass_g\")]`. Try doing this a couple of different ways.\n2. Extract the `bill_length_mm` variable from this table and assign it to an object called `bill_length`. Do the same for `bill_depth_mm` and call it `bill_depth`. You can use either `<table>[[<variable>]]` or `<table>$<variable>`. \n\n## Density Plots\n\nHere you will learn how to generate a \"density\" plot or a plot of the underlying probability density of a variable using `ggplot()` and `geom_density()`. This is similar to a histogram in that it seeks to show the distribution of a continuous random variable. It differs, however, in the way it goes about doing that. To see how they differ, let's first have a look at these two plots of the titanic data. The one on the left is a histogram, the one on the right a density plot. \n\n::: {.callout-warning collapse=true}\n\nTo be able to work through the examples in this section, you need to run the code below. We'll explain what this code does in another lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitanic <- read.csv(\"https://raw.githubusercontent.com/wilkelab/SDS375/master/datasets/titanic.csv\")\n```\n:::\n\n\n:::\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-15-1.png){width=480}\n:::\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-15-2.png){width=480}\n:::\n:::\n\n\nThe big difference here is that histograms discretize a sample using bins, counts the number of observations that fall into each bin, and then represents those counts using the heights of the rectangles. A density plot uses a method known as kernel density estimate (or KDE) to estimate the density of each observation and represents it using the height of a smooth and continuous curve. The KDE approach works like this. First, you set each data point as the mean of a distribution, typically the normal or Gaussian distribution (also called the __kernel__). Each distribution is assumed to have the same varianc eor standard deviation (called the __bandwidth__), which is set to some arbitrary value. The heights of the kernels are then summed to produce a curve like the one above. \n\nAs with the histogram, we specify a density geometry for ggplot using `geom_density()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age)) + \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-16-1.png){width=480}\n:::\n:::\n\n\nAgain, we can specify different aesthetics like `fill` and `color` and update the labels with `labs()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age)) + \n  geom_density(\n    fill = \"#A8BFF0\", \n    color = \"#183C8C\"\n  ) + \n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-17-1.png){width=480}\n:::\n:::\n\n\nWe can also map these aesthetics to other variables like the sex of the passenger.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age, fill = sex)) + \n  geom_density() + \n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-18-1.png){width=480}\n:::\n:::\n\n\nAnd, we can change the default fill colors using `scale_fill_manual()`, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age, fill = sex)) + \n  geom_density() + \n  scale_fill_manual(\n    values = c(\"#A8BFF0\", \"#FFE66D\")\n  ) +\n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-19-1.png){width=480}\n:::\n:::\n\n\nIn this case, however, it's hard to see where the two distributions overlap, which makes it hard to compare them. One way to fix this is to change the opacity of the fill color using the `alpha()` function (note that the alpha or transparency of a color can range from 0 to 1.). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age, fill = sex)) + \n  geom_density() + \n  scale_fill_manual(\n    values = alpha(c(\"#A8BFF0\", \"#FFE66D\"), 0.5)\n  ) +\n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-20-1.png){width=480}\n:::\n:::\n\n\nThis is still a little hard to read, so let's try faceting instead of alpha. Let's also drop the background vertical grid lines using the `theme()` function. At the same time, we'll go ahead and drop the label \"sex\" from the legend as that should be obvious from the key. We do that by setting `name = NULL` in `scale_fill_manual()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age, fill = sex)) + \n  geom_density() + \n  scale_fill_manual(\n    name = NULL,\n    values = c(\"#A8BFF0\", \"#FFE66D\")\n  ) +\n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  ) +\n  facet_wrap(~sex) +\n  theme_minimal() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-21-1.png){width=480}\n:::\n:::\n\n\nNotice that the facet labels are redundant with the legend key here, so let's remove those, too. We do that by setting the theme arguments `strip.background` and `strip.text` to `element_blank()`. Finally, we can move the legend to the bottom of the plot and make it horizontal with `legend.position` and `legend.direction` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(titanic, aes(age, fill = sex)) + \n  geom_density() + \n  scale_fill_manual(\n    name = NULL,\n    values = c(\"#A8BFF0\", \"#FFE66D\")\n  ) +\n  labs(\n    x = \"Age\",\n    y = \"Density\",\n    title = \"Age Distribution\",\n    subtitle = \"Passengers of the Titanic\"\n  ) +\n  facet_wrap(~sex) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    strip.background = element_blank(),\n    strip.text = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-22-1.png){width=480}\n:::\n:::\n\n\n### Exercises\n\n1. Make a kernel density plot of penguin bill length using `ggplot()` and `geom_density()`. Then make all of the following changes:\n    - Map penguin `species` to the `fill` aesthetic.\n    - Update the axis labels and plot title using `labs()`.\n    - Use `scale_fill_viridis` to use colorblind safe colors for the fill. Note! Species is a discrete or categorical variable, so make sure to set `discrete = TRUE`!\n    - Use `facet_wrap()` to facet by `species`.\n    - Choose a suitable theme, like `theme_minimal()`.\n    - Remove vertical grid lines.\n    - Change the legend position to bottom and make it horizontal.\n    - Remove strip text and background.\n\n## Bivariate Statistics\n\nBivariate statistics provide simple measures of the relationship between two variables. Here we will learn how to calculate two such statistics in R: covariance and correlation. These allow us to describe the direction of the relationship (_is it positive or negative?_) and the strength of the relationship (_is it strong or weak?_). In this case, we'll investigate the relationship between penguin body mass and bill length. We'll be asking this __question__: Is there a relationship between bill length and body mass? Is it positive or negative? \n\nBefore we do that, however, it is useful to visualize our data. Since we are concerned with a potential relationship, we will use a scatterplot, or a cloud of points arrayed along the dimensions of two variables, in this case body mass and bill length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = bill_length_mm)) + \n  geom_point(\n    shape = 21,\n    fill = \"#A8BFF0\",\n    color = \"#15357A\",\n    size = 2\n  ) +\n  labs(\n    x = \"Body Mass (g)\",\n    y = \"Bill Length (mm)\",\n    title = \"Palmer Penguins\"\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](04-ols-lab_files/figure-html/unnamed-chunk-23-1.png){width=480}\n:::\n:::\n\n\nWhat does this tell you about the relationship between these variables?\n\n### Covariance\n\nCovariance provides a measure of the extent to which two variables vary together. The sign of the covariance reflects a positive or negative trend, but not magnitude. To calculate this value in R, use the `cov()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_length <- penguins$bill_length_mm\nbody_mass_g <- penguins$body_mass_g\n\ncov(bill_length, body_mass_g, use = \"complete.obs\") # complete.obs means ignore NA values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2606\n```\n:::\n:::\n\n\nThis is a positive number, meaning the relationship between bill length and body mass is positive (the one tends to increase as the other increases). The size of the number by itself is unhelpful, however, and cannot be used to infer anything about the strength of the relationship. That is because covariance is sensitive to the unit of measure. If, for example, we convert `body_mass` from grams to kilograms, we will get a different covariance statistic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert to kilograms by dividing by 1000\nbody_mass_kg <- body_mass_g/1000\n\ncov(bill_length, body_mass_kg, use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.61\n```\n:::\n:::\n\n\n### Correlation\n\nTo remove units of measure and prevent resulting changes in the magnitude of the covariance, we can scale the covariance by the standard deviations of the samples. The resulting value is known as Pearson's Correlation Coefficient, which ranges from -1 to 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(bill_length, body_mass_g, use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.595\n```\n:::\n:::\n\n\nJust to demonstrate that this isn't sensitive to units of measure, let's see what happens when use body mass measures in kilograms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(bill_length, body_mass_kg, use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.595\n```\n:::\n:::\n\n\nThere's no change! In either case, the resulting coefficient is greater than zero, suggesting a positive trend, but is this value significantly different than zero? To answer that question, we can convert this coefficient to a t-statistic and compare it to a t-distribution. This is done with the `cor.test()` function. For this test, we have the following hypotheses:\n\n- $H_0$: the coefficient is equal to zero\n- $H_1$: the coefficient is _not_ equal to zero\n\nAnd, of course, we must stipulate a critical value. In this case, we will stick with tradition:  \n\n$\\alpha = 0.05$  \n\nSo, now, here is our test:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(bill_length, body_mass_g, use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's product-moment correlation\n\ndata:  bill_length and body_mass_g\nt = 14, df = 340, p-value <0.0000000000000002\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.522 0.660\nsample estimates:\n  cor \n0.595 \n```\n:::\n:::\n\n\nIn this case, you see that $p < \\alpha$, hence we reject the null hypothesis, meaning our coefficient estimate is significantly different than zero. There is, in other words, a significant positive relationship between body mass and bill length among the Palmer penguins.  \n\n### Exercises\n1. Using the `penguins` dataset, do all of the following:\n    - calculate the covariance between bill length and bill depth,\n    - calculate Pearson's Correlation Coefficient for bill length and bill depth,\n    - do a correlation test to determine whether the coefficient is significantly different than zero, and\n    - be sure to state your null and alternative hypotheses, as well as the critical value!\n2. What does the correlation test tell you about the relationship between bill length and bill depth?  \n\n## Linear Models\n\nIn this section, we will learn how to fit a linear model to our data. We will look, specifically, at a scenario involving an experiment with cars recorded in the `cars` dataset. We want to know what kind of relationship there is between the distance (in feet) a car travels after the brakes are applied and the speed (in miles per hour) the car was going when the brakes were applied. We will be doing this by fitting a linear model with the `lm()` function. Here are our hypotheses:\n\n- $H_0$: there is no relationship between speed and distance.\n- $H_1$: there is a relationship between speed and distance.\n\n### Model formula\n\nFirst, however, let's discuss the formula syntax that the `lm()` function uses. You were already introduced to this with the `t.test()`, but let's go into a little more detail now. To fit a model, we must first specify a formula. This involves three components: a predictor variable, the tilde `~`, and a response variable. The syntax is this:\n\n`<response> ~ <predictor>` or `<dependent> ~ <independent>`\n\nIn the case of the cars data, that's:\n\n`dist ~ speed`\n\nThis can be read as saying, in effect, \"distance as a function of speed.\" Note that you do not have to put the variables in quotes or anything like that. It's just the names of the variables separated by a tilde.\n\n### Model fitting\n\nIn addition to specifyfing the formula, we must also tell the `lm()` function what data set our observations are coming from. We do this by specifying the `data` argument. The whole function call looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars_model <- lm(dist ~ speed, data = cars)\n\ncars_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nCoefficients:\n(Intercept)        speed  \n     -17.58         3.93  \n```\n:::\n:::\n\n\nHere, the model estimates a coefficient for both the intercept and the relationship between speed and distance.\n\n### Model summary\n\nA more informative report of the model is provided by the `summary()` function. In addition to reporting on the model coefficients, this will also conduct a t-test on each coefficient, evaluating whether they are significantly different than zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cars_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-29.07  -9.53  -2.27   9.21  43.20 \n\nCoefficients:\n            Estimate Std. Error t value        Pr(>|t|)    \n(Intercept)  -17.579      6.758   -2.60           0.012 *  \nspeed          3.932      0.416    9.46 0.0000000000015 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.4 on 48 degrees of freedom\nMultiple R-squared:  0.651,\tAdjusted R-squared:  0.644 \nF-statistic: 89.6 on 1 and 48 DF,  p-value: 0.00000000000149\n```\n:::\n:::\n\n\nWe'll go over this `summary()` in more detail later. For now, note that it reports the coefficient \"Estimate\", the t-statistic (or \"t value\") for each coefficient estimate, and the p-value for the respective t-tests. In each case, the null hypothesis is that the coefficient is zero. A small p-value then gives us reason to reject the null and accept the coefficient estimate as significant. In this case, the p-value is very small, so we can accept both the intercept and speed coefficients. This tells us (as you might expect) that there is a significant positive relationship between the speed the car was going when it applied the brakes and the distance it traveled after applying the brakes.\n\n### Exercises\n\n1. Using the `penguins` dataset, build a linear model of the relationship between bill length and bill depth.\n2. What are the coefficients reported by this model? Specifically, the intercept and the coefficient of relationship between bill length and bill depth.\n3. Apply the `summary()` function to your model. Are the coefficients significant?\n\n## Homework\n\n1. Load the following datasets from the `archdata` package using `data()`.\n    - `DartPoints`\n    - `OxfordPots`\n2. Practice extracting variables from these tables. \n    - From each, remove one variable and assign it to an object with an informative name.\n    - Calculate the mean and variance for each variable. \n2. Using the `DartPoints` dataset, make a kernel density plot of dart `Length` to visualize its distribution. Make sure to do all of the following:\n    - Map the dart `Name` (or type) to the `fill` aesthetic.\n    - Update the axis labels and plot title using `labs()`.\n    - Use `scale_fill_viridis` to use colorblind safe colors for the fill. Note! Species is a discrete or categorical variable, so make sure to set `discrete = TRUE`!\n    - Use `facet_wrap()` to facet by `Name` (or type).\n    - Choose a suitable theme, like `theme_minimal()`.\n    - Remove vertical grid lines.\n    - Change the legend position to bottom and make it horizontal.\n    - Remove strip text and background.\n2. Using the `DartPoints` dataset, calculate the covariance and correlation between dart length and width. \n    - Then conduct a correlation test to evaluate the significance of Pearson's Correlation Coefficient.\n    - Be sure to state the null and alternative hypotheses, as well as the critical value.\n    - Is the coefficient significant?\n    - What does this mean about the relationship between dart length and width?\n2. Using the `DartPoints` dataset, build a linear model showing the relationship (if any) between the length and width of dart points. Be sure to do all of the following:\n    - To visualize the relationship, make a scatter plot of dart `Length` and `Width` using `ggplot()` and `geom_point()`. Hint: your aesthetic mapping should be `aes(x = Width, y = Length)`.\n    - Use the correct formula syntax. In this case, the dependent variable is `Length` and the independent variable is `Width`. \n    - Use `summary()` to report the model. \n    - Are the coefficient estimates significant?\n    - What does this mean about the relationship between the length and width of dart points? Hint: it's called allometry.\n2. Using the `OxfordPots` dataset, build a linear model showing the relationship (if any) between the percentage of Oxford Pots found on an archaeological site and the distance of that site from the city of Oxford. Be sure to do all of the following:\n    - To visualize the relationship, make a scatter plot of the proportion of Oxford pots and distance to Oxford using `ggplot()` and `geom_point()`. Hint: your aesthetic mapping should be `aes(x = OxfordDst, y = OxfordPct)`.\n    - Use the correct formula syntax. In this case, the dependent variable is `OxfordPct` and the independent variable is `OxfordDst`. \n    - Use `summary()` to report the model. \n    - Are the coefficient estimates significant?\n    - What does this mean about the relationship between the proportion of Oxford pots on an archaeological site and distance from Oxford?    ",
    "supporting": [
      "04-ols-lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}