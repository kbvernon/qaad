[
  {
    "objectID": "classes.html",
    "href": "classes.html",
    "title": "Classes",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nJan 10, 2023\n\n\nWeek 01: Introduction\n\n\nWhy statistics? Why R? Why Quarto? Making a webpage and a plot in just seconds!\n\n\n\n\nJan 17, 2023\n\n\nWeek 02: Probability as a Model\n\n\nA simple experiment. Random variables. Probability distributions. Probability as a model.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "classes/01-intro.html#lab-exercises",
    "href": "classes/01-intro.html#lab-exercises",
    "title": "Week 01: Introduction",
    "section": "üî¨ Lab Exercises",
    "text": "üî¨ Lab Exercises\nWeek 01 Lab"
  },
  {
    "objectID": "classes/02-probability.html#lab-exercises",
    "href": "classes/02-probability.html#lab-exercises",
    "title": "Week 02: Probability as a Model",
    "section": "üî¨ Lab Exercises",
    "text": "üî¨ Lab Exercises\nWeek 02 Lab"
  },
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Looking for help",
    "section": "",
    "text": "Wisdom of the Ancients (xkcd 979)."
  },
  {
    "objectID": "help.html#the-google-search-paradox",
    "href": "help.html#the-google-search-paradox",
    "title": "Looking for help",
    "section": "The Google Search Paradox",
    "text": "The Google Search Paradox\nAs you make your first tentative forays into the R programming environment, you will on occasion experience the jarring dislocation of an R error, a typically bright red eruption of your R console, perhaps symbolic of your code exploding before your eyes. Here is one of the more infamous errors you are likely to encounter:\n\nobject of type 'closure' is not subsettable\nNever mind what this particular error means.1 The point is that it can be terribly frustrating when you encounter it or one of its kin.1¬†Though check out Jenny Bryan‚Äôs talk at the 2020 RStudio Conference: https://rstudio.com/resources/rstudioconf-2020/object-of-type-closure-is-not-subsettable/\nTroubleshooting these errors can often be an additional source of anxiety and frustration, especially early on, as you simply lack the words required to describe your problem accurately and, thus, to formulate the question whose answer you so desperately need. I like to refer to this unhappy circumstance as the Google Search Paradox because you will inevitably find yourself staring at an empty search bar, wondering what words to give to Google. It‚Äôs also a bit like Meno‚Äôs Paradox, or the Paradox of Inquiry. For if you could properly state your question, it‚Äôs probably the case that you already know the answer. So, you either know and thus don‚Äôt need to ask, or need to ask, but don‚Äôt know how.\nOf course, the situation is not nearly so dire as this. In truth, you always know at least a little about your problem - you do have the error itself after all! - and can thus Google your way through to an answer - eventually, anyway. But life is fleeting, as they say, and time is short, so you should probably avoid the brute force approach, relying instead on searching efficiently. To help you with that (and to help you get better with that), this page provides a brief annotated list of where to look for answers, starting from within R itself!"
  },
  {
    "objectID": "help.html#r-helpers",
    "href": "help.html#r-helpers",
    "title": "Looking for help",
    "section": "R helpers",
    "text": "R helpers\nTypically, though not always, R code will have lots of supporting documentation. These come in two varieties: function help pages and vignettes. If you are having trouble a single function to work properly, you may find its help page more useful. If you are having trouble getting through some analysis and you cannot pinpoint the exact reason for your trouble, the vignettes are probably where you should look. There are a couple of ways to access this documentation.\n\nFrom within R, you can use the help() and ?... functions to access short-form documentation. Examples include help(\"plot\") and ?plot. This will call up the function‚Äôs documentation page and display it in your computer‚Äôs graphical device.\nhelp.search(...) and ??... both provide means of searching through help pages to find multiple functions with the same name (and potentially the same or similar uses). Simply replace the ellipses (three dots) with a character string and these functions will return all help pages with that string. So if you want to carry out a cluster analysis, typing ??cluster will search for any functions in your installed packages that use the word cluster.\nThe rdrr.io website provides access to all function help pages online. If you Google an R function, a link to its documentation on this website is typically the first that you will see. For the best search results, I recommend Googling ‚ÄúR <package name> <function name>.‚Äù\nFrom within R, you can also access the vignettes using some combination of vignette(), browseVignettes(), and RShowDoc().\n\nThe function vignette() with no argument specified will bring up a list of all available vignettes, organized by package. If you want the vignettes for a particular R package, you can also type vignette(package = ...), for example, vignette(package = \"grid\") will bring up the vignettes for the grid package.\n\nbrowseVignettes() will open a locally hosted HTML page in your browser with links to all available R vignettes. This is actually quite helpful, and you should give it a try when you get a chance. Just browsing through these vignettes will give you a great feel for all that you can do in R.\n\nRShowDoc() is mostly for opening a single vignette. This is usefully paired with vignette(), which will give you the name of the vignette and package, so that you can, for example, call RShowDoc(what = \"plotExample\", package = \"grid\"). This will bring up the ‚ÄúplotExample‚Äù vignette from the grid package.\n\nPackage authors have lots of resources for sharing their documentation now, including websites designed specifically to present both function help pages and vignettes. Here is an example of the website for the colorspace package.\nFinally, you can access all available documentation for official R packages by navigating the Comprehensive R Archive Network (CRAN) website, here: https://cran.r-project.org/."
  },
  {
    "objectID": "help.html#rstudio-helpers",
    "href": "help.html#rstudio-helpers",
    "title": "Looking for help",
    "section": "RStudio helpers",
    "text": "RStudio helpers\nWhile RStudio provides loads of support to R users, here we mention some of the more important ones.\n\nRStudio How To Articles provide loads of how-to guides for working with R and RStudio. This is a very comprehensive suite of useful documentation.\nRStudio Cheatsheets strive to communicate package information in a single, concise poster format with lots of visual queues and simple definitions. These can be really helpful when you need a quick refresher on the use of some bit of code.\nRStudio Community is an online forum where individuals ask and answer questions about R and RStudio. They have a very strict code of conduct for their members that emphasizes mutual respect and inclusivity, so you will generally find the discussions here much more friendly and supportive. Use of this forum is highly recommended.\nRStudio Education is a very, very recent development by RStudio (it came online in 2020), and it is simply amazing as a resource for not only learning R itself, but also learning how to teach R. Please note that, with the exception of number 4, these RStudio help tools can be accessed within the RStudio IDE under the Help tab."
  },
  {
    "objectID": "help.html#r-community-helpers",
    "href": "help.html#r-community-helpers",
    "title": "Looking for help",
    "section": "R Community helpers",
    "text": "R Community helpers\nThe R community refers to R users who are actively communicating with and supporting other R users. As there are lots and lots of engaged R users these days, and more and more every day, the community is definitely thriving. There is also an expanding ethos within this community driven largely by RStudio and its code of conduct, so you will generally find R users to be a friendly bunch (if a little hoity-toity). So, let‚Äôs talk about where you can engage with this community. We have already mentioned one, RStudio Community, but here we will list some more.\n\nStack Overflow is a forum for programmers in all programming languages to ask and answer questions, much like RStudio Community. It‚Äôs just been around longer (2008 to be exact), which means its code of conduct has evolved over time to address a number of unanticipated issues. The consequence is that answers to questions will run the gamut from being respectful and clear to downright insulting. Still, it is a rich resource for addressing your R coding issues. And it has gotten a lot better.\nROpenSci is an R programming community focused on promoting open and reproducible research in science. They have a forum much like RStudio Community, a blog with helpful news and overviews of the packages in their ecosystem, and a rich suite of webpages for their supported R packages, which you can explore here.\nR-bloggers is a clearinghouse for R related content, basically an aggregator of content from individual blogs. It is worth perusing every now and then to pick up the occasional gem of R understanding.\nThe #rstats Twitter community is something. Use this if you use Twitter, I guess‚Ä¶\nThe rstats subreddit is a helpful community of Redditors that are pretty good about answering questions you might have."
  },
  {
    "objectID": "help.html#other-resources",
    "href": "help.html#other-resources",
    "title": "Looking for help",
    "section": "Other resources",
    "text": "Other resources\n\nThe UCLA Institute for Digital Research & Education offers Statistical Consulting geared toward R. This is a tremendous resource for both R and statistics and is highly recommended."
  },
  {
    "objectID": "help.html#reproducible-examples",
    "href": "help.html#reproducible-examples",
    "title": "Looking for help",
    "section": "Reproducible examples",
    "text": "Reproducible examples\nOthers have likely asked the same question you want to ask, so you will not always need to make a post yourself. But, in the off chance that you do find yourself confronted with a question never asked before, you need to make sure you provide R users with all the information and resources they need to help troubleshoot your code and to do so with the least effort possible. This involves providing a ‚Äúreproducible example‚Äù or reprex. There are two essential ingredients to a reprex:\n\nIt needs to be reproducible, obviously. That means you need to make sure you provide everything needed to reproduce your error as is, for instance, all library() calls in your code.\nIt needs to be minimal. In other words, do not include anything extraneous or burdensome, like a 400 MB data object. A much smaller R object should suffice.\n\nA lot has been written about how to put together a reprex, so rather than belabor the point here, it is perhaps best to direct you to Jenny Bryan‚Äôs reprex package, which will walk you through the process of submitting a help request on the various forums mentioned above."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative Analysis of Archaeological Data",
    "section": "",
    "text": "This is a Github page setup to host lectures and other content for the University of Utah course ANTH 5850: Quantitative Analysis of Archaeological Data (affectionately referred to as ‚Äúquad‚Äù). As its name suggests, this class offers students quantitative tools and techniques for working with archaeological data. Those tools include, first and foremost, the language of statistics, but also importantly the statistical programming language R, and finally the mark-up language Markdown (via Quarto), which aids in literate programming (think science communication). Obviously, no one can become fluent in a language - much less three languages! - with just four months of exposure. For that, there is no substitute for immersion, for living and working with these languages and the people who speak them, meaning scientists. This course is merely designed to get you started on that process and to hopefully make it smoother for you as you go. I think the word for it is a ‚Äúsurvey‚Äù course.\nOn this website, you‚Äôll find course lecture slides and labs. These are organized by class meetings, which you can find a link to in the navbar. The site was built using the open-source scientific and technical publishing system, Quarto, which you‚Äôll also learn about in this course! The source code for the website, along with the lecture slides and lab exercises, can be found at the associated Github repository."
  },
  {
    "objectID": "index.html#inspiration",
    "href": "index.html#inspiration",
    "title": "Quantitative Analysis of Archaeological Data",
    "section": "Inspiration?",
    "text": "Inspiration?\nI can‚Äôt take credit for all of the content in this course. The lecture slides, in particular, are adapted from the lectures of Dr.¬†Simon Brewer in the Department of Geography at the University of Utah. The R labs, at least the parts of them concerned with data science rather than statistics, draw heavily on the very popular book R for Data Science (2e) by Hadley Wickham and Garrett Grolemund.\nIt probably goes without saying, of course, but those folks are way smarter than I could ever hope to be, so any errors or confusions that occur here are definitely, one-hundred percent, without a doubt my own."
  },
  {
    "objectID": "index.html#reuse",
    "href": "index.html#reuse",
    "title": "Quantitative Analysis of Archaeological Data",
    "section": "Reuse",
    "text": "Reuse\n\nText and figures are licensed under Creative Commons Attribution CC BY 4.0. Any computer code (R, HTML, CSS, etc.) in slides and worksheets, including in slide and worksheet sources, is also licensed under MIT. Note that figures in slides may be pulled in from external sources and may be licensed under different terms. For such images, image credits are available in the slide notes, accessible via pressing the letter ‚Äòp‚Äô."
  },
  {
    "objectID": "labs/01-intro-lab.html",
    "href": "labs/01-intro-lab.html",
    "title": "Lab 01: Introduction",
    "section": "",
    "text": "In this lab, you will learn\n\nhow to use RStudio\nhow to make a plot with R\nhow to do math in R, create objects, use functions, etc.,\nhow to create an R Project folder\nhow to make a website (what?!) with Quarto\nand, you‚Äôll also learn the ends and outs of a typical workflow in R\n\nNo additional packages required this week.\n\n\n\ncars\n\nIncludes measurements of car speed and stopping distance.\npackage: datasets\n\nreference: https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/cars.html"
  },
  {
    "objectID": "labs/01-intro-lab.html#working-in-rstudio",
    "href": "labs/01-intro-lab.html#working-in-rstudio",
    "title": "Lab 01: Introduction",
    "section": "Working in RStudio",
    "text": "Working in RStudio\n\n\n\n\nIf you are going to do anything with R, RStudio is hands-down the best place to do it. RStudio is an open-source integrated development environment (or IDE) that makes programming in R simpler, more efficient, and most importantly, more reproducible. Some of its more user-friendly features are syntax highlighting (it displays code in different colors depending on what it is or does, which makes it easier for you to navigate the code that you‚Äôve written), code completion (it will try to guess what code you are attempting to write and write it for you), and keyboard shortcuts for the more repetitive tasks.\nPane layout\nWhen you first open RStudio, you should see three window panes: the Console, the Environment, and the Viewer. If you open an R script, a fourth Source pane will also open. The default layout of these panes is shown in the figure above.\n\n\nSource. The Source pane provides basic text editing functionality, allowing you to create and edit R scripts. Importantly, you cannot execute the code in these scripts directly, but you can save the scripts that you write as simple text files. A dead give away that you have an R script living on your computer is the .R extension, for example, my_script.R.\n\n\nConsole. The Console pane, as its name suggests, provides an interface to the R console, which is where your code actually gets run. While you can type R code directly into the console, you can‚Äôt save the R code you write there into an R script like you can with the Source editor. That means you should reserve the console for non-essential tasks, meaning tasks that are not required to replicate your results.\n\nEnvironment. The Environment pane is sort of like a census of your digital zoo, providing a list of its denizens, i.e., the objects that you have created during your session. This pane also has the History tab, which shows the R code you have sent to the console in the order that you sent it.\n\n\nViewer. The Viewer pane is a bit of a catch-all, including a Files tab, a Plots tab, a Help tab, and a Viewer tab.\n\nThe Files tab works like a file explorer. You can use it to navigate through folders and directories. By default, it is set to your working directory.\nThe Plots tab displays any figures you make with R.\nThe Help tab is where you can go to find helpful R documentation, including function pages and vignettes.\nThe actual Viewer tab provides a window to visualize R Markdown.\n\n\n\nLet‚Äôs try out a few bits of code just to give you a sense of the difference between Source and Console.\n\nAs you work through this lab, you can practice running code in the Console, but make sure to do the actual exercises in an R script.\n\nExercises\n\nFirst, let‚Äôs open a new R script. To open an R script in RStudio, just click File > New File > R Script (or hit Ctrl + Shift + N, Cmd + Shift + N on Mac OS).\nCopy this code into the console and hit Enter.\n\n\nrep(\"Boba Fett\", 5)\n\n\nNow, copy that code into the R script you just opened and hit Enter again. As you see, the code does not run. Instead, the cursor moves down to the next line. To actually run the code, put the cursor back on the line with the code, and hit Ctrl + Enter (CMD + Enter on Mac OS)."
  },
  {
    "objectID": "labs/01-intro-lab.html#make-your-first-plot",
    "href": "labs/01-intro-lab.html#make-your-first-plot",
    "title": "Lab 01: Introduction",
    "section": "Make Your First Plot!",
    "text": "Make Your First Plot!\nTo ease you into working with R, let‚Äôs visualize some data to answer a simple question: Do fast moving objects take longer to slow down than slow moving objects? Don‚Äôt worry about understanding all of this! It‚Äôs just to give you a feel for the sort of graphics you can make with R. We‚Äôll actually spend all of the next lab learning how to make even better graphics.\nThe data\nTo answer that question, we‚Äôll use the cars data.frame that comes pre-loaded with R. A data.frame is simply an R object that stores tabular data, with rows for each observation and columns for each variable. Let‚Äôs have a look at the first n rows of this table, specifically the first 5 rows. We can do this using the function head().\n\nhead(cars, n = 5)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n\n\nNote that, in this case, each row represents a car. The first column, or variable, records the speed (in miles per hour) each car was traveling when it applied its brakes, and the second column provides measures of the distances (in feet) that each took to stop.\nThe plot() function\nThe base R graphics package provides a generic function for plotting, which - as you might have guessed - is called plot(). To see how it works, try running this code:\n\nplot(cars)\n\n\n\n\nCustomizing your plot\nWith the plot() function, you can do a lot of customization to the resulting graphic. For instance, you can modify all of the following:\n\n\npch will change the point type,\n\nmain will change the main plot title,\n\nxlab and ylab will change the x and y axis labels,\n\ncex will change the size of shapes within the plot region,\n\npch will change the type of point used (you can use triangles, squares, or diamonds, among others),\n\ncol changes the color of the point (or its border), and\n\nbg changes the color of the point fill (depending on the type of point it is)\n\nFor instance, try running this code:\n\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n\n\n\n\nExercises\n\nComplete the following line of code to preview only the first three rows of the cars table.\n\n\nhead(cars, n = )\n\n\nModify the code below to change the size (cex) of the points from 2 to 1.5.\n\n\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2\n)\n\n\nWhat does this plot tell us about the relationship between car speed and stopping distance? Is it positive or negative? Or is there no relationship at all? If there is a relationship, what might explain it?\nComplete the code below to add ‚ÄúStopping distance for cars‚Äù as the main title.\n\n\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 1,\n  main = \n)\n\n\nComplete the code below to add ‚ÄúSpeed (mph)‚Äù as the x-axis label and ‚ÄúDistance (ft)‚Äù as the y-axis label.\n\n\nplot(\n  cars,\n  pch = 21,\n  bg = \"darkorange\",\n  col = \"darkred\",\n  cex = 2,\n  main = \"Stopping distance for cars\",\n  xlab = ,\n  ylab = \n)"
  },
  {
    "objectID": "labs/01-intro-lab.html#r-basics",
    "href": "labs/01-intro-lab.html#r-basics",
    "title": "Lab 01: Introduction",
    "section": "R Basics",
    "text": "R Basics\n\n\n\n\nR is a calculator\nYou can just do math with it:\n\n300 * (2/25)\n\n[1] 24\n\n3^2 + 42\n\n[1] 51\n\nsin(17)\n\n[1] -0.9613975\n\n\nObjects and Functions\nBut, R is more than just a calculator. There are a lot of things you can make with R, and a lot of things you can do with it. The things that you make are called objects and the things that you do things with are called functions. Any complex statistical operation you want to conduct in R will almost certainly involve the use of one or more functions.\nCalling functions\nTo use a function, we call it like this:\n\nfunction_name(arg1 = value1, arg2 = value2, ...)\n\nTry calling the seq() function.\n\nseq(from = 1, to = 5)\n\n[1] 1 2 3 4 5\n\n\nAs you can see, this generates a sequence of numbers starting at 1 and ending at 5. There are two things to note about this. First, we do not have to specify the arguments explicitly, but they must be in the correct order:\n\nseq(1, 5) \n\n[1] 1 2 3 4 5\n\nseq(5, 1)\n\n[1] 5 4 3 2 1\n\n\nSecond, the seq() function has additional arguments you can specify, like by and length. While we do not have to specify these because they have default values, you can change one or the other (but not at the same time!):\n\nseq(1, 5, by = 2)\n\n[1] 1 3 5\n\nseq(1, 5, length = 3)\n\n[1] 1 3 5\n\n\nCreating objects\nTo make an object in R, you use the arrow, <-, like so:\n\nobject_name <- value\n\nTry creating an object with value 5.137 and assigning it to the name bob, like this:\n\nbob <- 5.137\n\nThere are three things to note here. First, names in R must start with a letter and can only contain letters, numbers, underscores, and periods.\n\n# Good\nwinter_solder <- \"Buckey\"\nobject4 <- 23.2\n\n# Bad\nwinter soldier <- \"Buckey\" # spaces not allowed\n4object <- 23.2            # cannot start with a number\n\nSecond, when you create an object with <-, it ends up in your workspace or environment (you can see it in the RStudio environment pane). Finally, it is worth noting that the advantage of creating objects is that we can take the output of one function and pass it to another.\n\nx <- seq(1, 5, length = 3)\n\nlogx <- log(x)\n\nexp(logx)\n\n[1] 1 3 5\n\n\nExercises\n\nUse seq() to generate a sequence of numbers from 3 to 12.\nUse seq() to generate a sequence of numbers from 3 to 12 with length 25.\nWhy doesn‚Äôt this code work?\n\n\nseq(1, 5, by = 2, length = 10)\n\n\nUse <- to create an object with value 25 and assign it to a name of your choice.\nNow try to create another object with a different value and name.\nWhat is wrong with this code?\n\n\n2bob <- 10"
  },
  {
    "objectID": "labs/01-intro-lab.html#workflow",
    "href": "labs/01-intro-lab.html#workflow",
    "title": "Lab 01: Introduction",
    "section": "Workflow",
    "text": "Workflow\n\n\n\n\nAs you work more and more in R, you will learn that statistical analyses tend to involve the same basic set of tasks:\n\n\nimporting data,\n\nwrangling data to get it into a format necessary for analysis,\n\nexploring data with some simple descriptive statistics,\n\n\nanalyzing data with models to investigate potential trends or relationships, and\n\nsummarizing the results.\n\nAt various stages, you will also spend considerable time\n\n\nvisualizing the data and the results, either to explore the data further or to help communicate the results to others.\n\nA lot of the output of this process, we will also want to save for later, perhaps to include in a publication (like a figure or model summary), but maybe also to avoid repetition of difficult and time-consuming tasks, so the workflow will also involve\n\n\nexporting refined data and models.\n\nTo make this more concrete, let‚Äôs try out an example, working with the cars data again. As we go through this, try running all the code in the console.\nAn Example\nSuppose we return to the question we asked in the plotting section: Does the speed a car is going when it applies its brakes determine the distance it takes the car to stop? Obviously, the answer is Yes, but let‚Äôs pretend we don‚Äôt know the answer, so we can walk through the process of answering the question anyway.\nImport\nFirst, we need some data. In this case, we do not actually need to import the cars dataset because it is already available to us in R, so let‚Äôs just pretend like we did.\nExplore\nNow, let‚Äôs explore the data. Always, always, always, the best way to explore data is to visualize data! We already did this once, but it can‚Äôt hurt to try it again!\n\nplot(\n  cars,\n  pch = 21,\n  bg = adjustcolor(\"gray\", 0.75),\n  col = \"gray25\",\n  cex = 1.5\n)\n\n\n\n\nThen, we can do things like calculate the mean stopping distance.\n\nmean(cars$dist)\n\n[1] 42.98\n\n\nNote that we use the $ operator to pull the distance (dist) values from the cars table and supply it to the mean() function. Don‚Äôt worry too much about wrapping your head around that idea as we will talk about it more in another lab. We can also make a histogram to explore the distribution of stopping distances:\n\nhist(cars$dist)\n\n\n\n\nWhat does this tell you about car stopping distances? Is it clustered? Random?\nWrangle\nMaybe we think that one really long distance is exceptional, perhaps owing to measurement error, and we want to remove it from our analysis. In that case, we want to subset the data, including only distance values less than some amount, say 100 ft.\n\ncars <- subset(cars, dist < 100)\n\nThis is data wrangling, preparing the data for analysis.\nAnalyze\nNow, finally, we might want to answer our question directly by modeling the relationship between car speeds and stopping distances. Here, our hypothesis is that there is no relationship. This is called the null hypothesis. If we can show that this hypothesis is very likely false, then we can with some confidence accept the alternative hypothesis, namely, that there is a relationship. To test the null hypothesis, we can construct a simple linear model. In R, we do this:\n\ndistance_model <- lm(dist ~ speed, data = cars)\n\nsummary(distance_model)\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-26.789  -9.149  -1.672   8.013  43.048 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -14.0021     6.2951  -2.224    0.031 *  \nspeed         3.6396     0.3918   9.290 3.26e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 14.1 on 47 degrees of freedom\nMultiple R-squared:  0.6474,    Adjusted R-squared:  0.6399 \nF-statistic: 86.31 on 1 and 47 DF,  p-value: 3.262e-12\n\n\nWoah! That‚Äôs a lot to digest. For now, just note that the asterisks (*) imply that that there is very likely a relationship between speed and distance. But, what is that relationship? Or, what does it look like? Well, let‚Äôs try to visualize that in R, too.\n\nplot(\n  cars,\n  pch = 21,\n  bg = adjustcolor(\"gray\", 0.75),\n  col = \"gray25\",\n  cex = 1.5,\n  xlab = \"Speed (mph)\",\n  ylab = \"Distance (ft)\"\n)\n\nabline(\n  distance_model, \n  col = \"#A20000\",\n  lwd = 2\n)\n\ntitle(\n  \"Distance Model\",\n  line = 0.3, \n  adj = 0, \n  cex = 1.5\n)\n\n\n\n\nExport\nNow, if we feel it necessary, we can save our model, so we can inspect it again later.\n\nsave(distance_model, file = \"distance_model.Rds\")\n\nAnd that‚Äôs it! Now, all we have to do is write this up and publish it! Easy peasy."
  },
  {
    "objectID": "labs/01-intro-lab.html#r-projects",
    "href": "labs/01-intro-lab.html#r-projects",
    "title": "Lab 01: Introduction",
    "section": "R Projects",
    "text": "R Projects\n\n\n\n\nYOU CANNOT EAT R CODE. Believe me. You can‚Äôt. Eventually, you‚Äôll have to close out of R, turn off your computer, walk away, and do whatever it is that you do to maintain your existence. That means you need some way to save your progress and you need some place to save it. R has a few built-in tools for this, and they are really convenient, at least early on. However, you will be much better off if you get into the habit of using RStudio Projects. What is an R Project? Basically, it‚Äôs a folder on your computer that you can use to organize all the data, code, figures, texts, and analyses associated with a single scientific research project.\nWhen you open your project in RStudio, it will establish your project folder as your working directory by default. The advantage of this is that you can access R scripts and data using relative file paths rather than specifying the full path from your computer‚Äôs root directory. Why is this advantageous? Because you can copy the project folder to any computer you want and your relative file paths will just work!\nExercises\n\nBefore we setup your project, let‚Äôs turn off some of R‚Äôs default settings.\n\nIn RStudio, go to Tools > Global Options‚Ä¶.\nIn the dialog box that appears, navigate to the General section, and under Workspace, make sure ‚ÄúRestore .RData into workspace at startup‚Äù is unchecked.\nThen, for ‚ÄúSave workspace to .Rdata on exit‚Äù, select Never.\nHit ‚ÄúApply‚Äù, then hit ‚ÄúOK.‚Äù\n\n\n\nNow, we are going to create a new project for you for this class. You will use this folder to save all your lab and homework exercises, required datasets, and figures. To do that, follow these steps:\n\nIn RStudio, go to File > New Project‚Ä¶.\nIn the dialog box that appears, select New Directory, then New Project.\nPut ‚Äúqaad‚Äù as the Directory name.\nThen Browse to a location on your computer where you would like to keep this project and hit ‚ÄúOK.‚Äù\nMake sure ‚ÄúCreate a git repository‚Äù and ‚ÄúUse renv with this project‚Äù are unchecked.\n\nThen click ‚ÄúCreate Project.‚Äù This will restart RStudio with your project loaded. You can confirm this by looking at the top left of the RStudio window. It should say ‚Äúqaad - RStudio‚Äù now. If you look in the File pane (bottom-right), you will also see a file called ‚Äúqaad.Rproj.‚Äù\n\n\nOnce you have your project folder setup, have a look at the Files pane again. You should see a button that says ‚ÄúNew Folder.‚Äù Click that, and in the dialog box that appears, enter ‚ÄúR‚Äù and hit ‚ÄúOK.‚Äù You should now see a folder in your project directory called ‚ÄúR.‚Äù This is where you will keep all the files with your R code in it. Repeat this process to add ‚Äúdata‚Äù, ‚Äúfigures‚Äù, and ‚Äú_misc‚Äù folders to your project. The ‚Äú_misc‚Äù folder is short for miscellaneous. This folder is not strictly necessary but I find it helpful. It‚Äôs like that drawer in the kitchen where random stuff goes. It might not be clean or orderly, but at least your kitchen is!\nJust to check that everything is working, minimize RStudio and navigate to the location of your R Project on your computer. Do you see the folders you have created and the ‚Äúqaad.Rproj‚Äù file?"
  },
  {
    "objectID": "labs/01-intro-lab.html#quarto",
    "href": "labs/01-intro-lab.html#quarto",
    "title": "Lab 01: Introduction",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\n\nFigure¬†1: Artwork from ‚ÄúHello, Quarto‚Äù keynote by Julia Lowndes and Mine √áetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.\n\n\nQuarto offers a unified framework for statistical programming and science communication by letting you write and run R code alongside text to explain your methods to others. The text you write is formatted using Markdown syntax (the same syntax you would use on, for example, a Reddit post). The basis for creating documents using Quarto is a test-based file format with the extension ‚Äú.qmd‚Äù, short for Quarto Markdown. In just about every one of these documents you come across, you will find three major components:\n\na YAML header surrounded at the top and bottom by three hyphens, ---,\nR code chunks surrounded at the top and bottom by three back ticks, ```, and\ntext formatted with markdown syntax like # heading 1 and _italics_.\n\nHere is an example:\n---\ntitle: \"Week 01\"\nauthor: \"Kenneth Blake Vernon\"\ndate: \"1/10/2023\"\nformat: html\nexecute:\n  echo: true\n---\n\n## Lab Exercises\n\n### Plot\n\n1. Complete the following line of code to preview only the first three rows of the `cars` table.\n\n```{r}\n\nhead(cars, n = )\n\n```\n\n***\n\n## Homework Exercises\n\n1. \nLet‚Äôs start with some simple markdown formatting and work our way back to the YAML.\nMarkdown formatting\nMarkdown is a lightweight markup language for formatting plain text and is designed to be easy to read and write. The markdown you will use most often includes all of the following (borrowed from here:\nText formatting \n------------------------------------------------------------\n\n*italic*  or _italic_\n**bold**   __bold__\n`code`\nsuperscript^2^ and subscript~2~\n\nHeadings\n------------------------------------------------------------\n\n# 1st Level Header\n\n## 2nd Level Header\n\n### 3rd Level Header\n\nLists\n------------------------------------------------------------\n\n*   Bulleted list item 1\n\n*   Bulleted list item 2\n\n    * Nested list item 2a\n\n    * Nested list item 2b\n\n1.  Numbered list item 1\n\n1.  Numbered list item 2. The numbers are incremented automatically in the output.\n\n1.  Numbered list item 3. \n\nLinks and images\n------------------------------------------------------------\n\n<http://example.com>\n\n[linked phrase](http://example.com)\n\n![optional caption text](path/to/img.png)\nYAML\n‚ÄòYAML‚Äô is a recursive acronym that means ‚ÄúYAML Ain‚Äôt Markup Language.‚Äù You don‚Äôt actually need to know that. I just think it‚Äôs funny. The YAML controls features of the whole document, specifying, for instance, the title and author. It looks like this:\n---\ntitle: \"Week 01\"\nauthor: \"Kenneth Blake Vernon\"\ndate: \"1/11/2022\"\nformat: html\n---\nNotice the three dashes --- at the top and bottom. These must be there in order for Quarto to recognize it as the YAML. You should always include this at the beginning of the document. There‚Äôs A LOT you can specify in the YAML. In fact, you can specify basically anything you want, but being quite new to Quarto, I don‚Äôt think that would be helpful. For now, let me draw your attention to the format field. Quarto (with the power of a utility known as Pandoc) can generate a wide variety of output formats, including Word documents, PDFs, revealjs slides (presentations, what the slides in tihs class are built with), and even Powerpoint (if you really insist on it). In this class, we‚Äôll stick with the default HTML output, so the only thing you will need to specify in the YAML is the title, author, and date.\nBy the way, the HTML output is the same stuff that a website is built on. In fact, when you open the resulting HTML file, it will open in your browser.\nR code chunks\nAll R code that you want to run needs to be ‚Äúfenced‚Äù by three back ticks ```. You also need to tell Quarto that it‚Äôs R code and not, say, Python or SQL. To do that, you add {r} after the first set of back ticks. Altogether, it should look like this:\n```{r}\n\n1+1\n\n```\nInstead of typing this every time, you can use Ctrl + Alt + I (or CMD) in RStudio, and it will automatically generate a code chunk in your qmd document. You can run the code in these chunks like you would code in an R script, by placing the cursor over it and hitting Ctrl + Enter. You can specify options for code chunks in R Markdown that will affect the way that they behave or are displayed. You can find a complete list of chunk options at http://yihui.name/knitr/options/. Here are a few examples:\n\n\neval: false prevents code from being evaluated.\n\necho: false hides the code but not the results of running the code.\n\nwarning: false prevents R messages and warnings from appearing in the knitted document.\n\nHere is how it would look to specify these in a code chunk:\n```{r}\n#| echo: false\n#| warning: false\n\n1+1\n\n```\nYou can also set these globally, applying them to all code chunks, by specifying them in the execute field (for code execution) in the YAML at the top of your qmd document. It would look like this:\n---\ntitle: \"Week 01\"\nauthor: \"Kenneth Blake Vernon\"\ndate: \"1/11/2022\"\nformat: html\nexecute:\n  echo: false\n  warning: false\n---\nThere are loads more of these options, some of the more important ones involve figures you generate with these documents. Rather than overload you with all of those now, we‚Äôll try to go over some of those here or there in future labs and homework exercises.\nExercises\n\nLet‚Äôs create a new qmd document in RStudio. To do that, follow these steps:\n\nGo to File > New File > Quarto Document‚Ä¶.\nIn the dialog box that appears, put ‚ÄúANTH 5580 (QAAD) Week 01‚Äù as the Title.\nPut your name as Author.\nHit ‚ÄúOK‚Äù.\n\n\n\nRStudio will open a new qmd document for you. Notice that it sets up the YAML for you. Let‚Äôs copy the template we will use for these course assignments. To do that, follow these steps:\n\nScroll up to the section above with the example of a qmd document. You can now copy and paste this into your qmd document (I recommend typing it out by hand, so you can get a feel for it, but that‚Äôs not necessary).\n\n\nNotice that this template has two level two headers, ‚ÄúLab Exercises‚Äù and ‚ÄúHomework Exercises.‚Äù These are the two major assignments you will have to complete each week. You will enter all your answers in a qmd document with this format and submit it via Canvas. To make sure your code is actually working, you can ‚Äúrender‚Äù the document and see if it completes without error. This is partly what I will do each week when grading your assignments. To keep these things organized, each exercise section in the lab should have its own level three header, like ### Plot for this week. Since there is no R related homework assignment for this week, you can just delete that section from this qmd document. Before continuing, save your qmd document to the R folder in your course project directory.\nNow, go back through this lab and re-do the exercises by adding them to this qmd document. Make sure to save that again, then submit it on the Canvas course page. Again, go ahead and render the document, too, just to make sure everything is working. This is the process that you will go through each week!"
  },
  {
    "objectID": "labs/01-intro-lab.html#homework",
    "href": "labs/01-intro-lab.html#homework",
    "title": "Lab 01: Introduction",
    "section": "Homework",
    "text": "Homework\nThere is no R related homework assignment for this week. Please fill out the pre-course self-assessment survey on Canvas."
  },
  {
    "objectID": "labs/02-probability-lab.html",
    "href": "labs/02-probability-lab.html",
    "title": "Lab 02: Statistical Graphics",
    "section": "",
    "text": "This lab will guide you through the process of\n\nloading (or ‚Äúattaching‚Äù) R packages with library()\n\ngenerating summary statistics for your data\nvisualizing data with the grammar of graphics and ggplot()\n\naesthetic mappings\ngeometric objects\nfacets\nscales\nthemes\n\n\n\nWe will be using the following packages:\n\narchdata\nggplot2\npalmerpenguins\nskimr\nviridis\n\n\n\npenguins\n\nIncludes measurements for penguin species, island in Palmer Archipelago, size (flipper length, body mass, bill dimensions), and sex.\npackage: palmerpenguins\n\nreference: https://allisonhorst.github.io/palmerpenguins/reference/penguins.html\n\n\n\n\nDartPoints\n\nIncludes measurements of 91 Archaic dart points recovered during surface surveys at Fort Hood, Texas.\npackage: archdata\n\nreference: https://cran.r-project.org/web/packages/archdata/archdata.pdf"
  },
  {
    "objectID": "labs/02-probability-lab.html#the-library",
    "href": "labs/02-probability-lab.html#the-library",
    "title": "Lab 02: Statistical Graphics",
    "section": "The Library",
    "text": "The Library\nR is an extensible programming language, meaning you can write R code to extend the functionality of base R. To share that code, R users will often bundle it into a package, a collection of functions, data, and documentation. You can think of packages as apps, but apps specifically designed for R. To make the functionality a package offers available in R, you have to load them in with the library() function (the technical term is attach).\nYou should always, always, always load all the packages you use at the beginning of a document. That way, people who read your code know exactly what packages you are using all at once and right away. To make this really, really explicit, I prefer to set this off with its own section that I call the ‚ÄúR Preamble.‚Äù In a Quarto document, it looks like this:\n## R Preamble\n\n```{r packages}\n#| warning: false\n\nlibrary(archdata)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(skimr)\nlibrary(viridis)\n\n```\nOf course, these aren‚Äôt just automatically on your computer, so you have to install the packages first. Then you can open them in R. To do that, you use the function install.packages(). For the packages used today, you can use this call just once like so:\ninstall.packages(c(\"archdata\", \"ggplot2\", \"palmerpenguins\", \"skimr\", \"viridis\"))\nNote that you only need to run this once, so don‚Äôt put this as a line in your Quarto document, which you might render multiple times. Just run it in the console.\nExercises\n\nOpen a new Quarto document and add the R Preamble with an R code chunk with the library() calls that load the R packages required for this lab.\nNow actually run each library() call. You can do that by either highlighting them and hitting Ctrl + Enter (Cmd + Enter) or by clicking the green arrow that appears in the top right of the code chunk."
  },
  {
    "objectID": "labs/02-probability-lab.html#summary-statistics",
    "href": "labs/02-probability-lab.html#summary-statistics",
    "title": "Lab 02: Statistical Graphics",
    "section": "Summary Statistics",
    "text": "Summary Statistics\n\n\n\n\n\nFigure¬†1: Artwork by Allison Horst.\n\n\nLet‚Äôs use R to describe some properties of a sample of penguins from Palmer Station in Antarctica. These data became available in R when you loaded the palmerpenguins package. They aren‚Äôt currently visible in your environment (for complicated reasons), but trust me, they‚Äôre there. The name of the dataset is penguins, so you can call it that way.\n\nhead(penguins, n = 5)\n\n# A tibble: 5 √ó 8\n  species island    bill_length_mm bill_depth_mm flipper_l‚Ä¶¬π body_‚Ä¶¬≤ sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema‚Ä¶  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema‚Ä¶  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema‚Ä¶  2007\n# ‚Ä¶ with abbreviated variable names ¬π‚Äãflipper_length_mm, ¬≤‚Äãbody_mass_g\n\n\n\n\nCentral tendency\nThe central tendency is, as its name suggests, a value around which other values tend to cluster. There are two primary measures of central tendency: the mean and the median. As you may recall, the mean or average of a sample is simply the sum of a finite set of values, \\(x_i\\), divided by the number of values, \\(n\\).\n\\[\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_i\\]\nRemember that this is only an estimate of the central tendency of a population, \\(\\mu\\)! In R, you can calculate the mean by hand if you like, but it‚Äôs probably easier to use the built-in R function, mean(). Let‚Äôs use this to calculate the mean bill length of penguins.\n\nmean(penguins$bill_length_mm)\n\n[1] NA\n\n\nWhoops! Need to set na.rm = TRUE to ignore missing or NA values.\n\nmean(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 43.9\n\n\nAn important limitation of the mean is its sensitivity to outliers - you know, like rich people. If you calculate the mean household income in the United States, for example, the incomes of obscenely wealthy individuals like Jeff Bezos and Elon Musk will pull that measure up, thus painting a much rosier picture of the US than the reality the rest of us live in. When there are extreme outliers, it is often advisable to use the median because it is less sensitive to outliers as it is the ‚Äúmiddle‚Äù number or value that evenly divides the sample in half.\n\nmedian(penguins$bill_length_mm, na.rm = TRUE)\n\n[1] 44.5\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nBy the way, did you notice the weird use of the dollar sign $? This is used to index data and pull out a specific element by its name. For example, when we run the code snippet penguins$bill_length_mm, we are asking R to pull the variable bill_length_mm from the penguins table and give us its values. One important implication of this sort of indexing is that we can assign the variable to its own object outside of the table, e.g.\nbill_length <- penguins$bill_length_mm\nYou‚Äôll actually learn more about this, in particular how to work with tabular data, in the next lab.\n\n\n\nDispersion\nDispersion describes the spread of data around its central tendency. Are the values tightly clustered around the central tendency or highly dispersed? Is there, in other words, a lot of variability? This is what dispersion seeks to characterize. As with the central tendency, it has two primary measures: variance and standard deviation. The variance of a sample is the mean squared error.\n\\[s^{2} = \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^{2}\\]\nThis is an estimate of the population variance, \\(\\sigma^2\\). To calculate the variance of a sample with R, use var().\n\nvar(penguins$body_mass_g, na.rm = TRUE)\n\n[1] 643131\n\n\nWhoa! That‚Äôs a really big number. Do penguins get that big? The answer, of course, is No.¬†The number is large because variance is squared error, so this is in units of squared-grams, \\(g^2\\), not grams, \\(g\\). Why do we square it? Well, if you think about it, some of the errors will be negative and some will be positive (some penguins will be larger than average and some smaller), but on balance - on average - the sum of the errors will tend towards zero, which is not terribly informative of the spread of the data. Or, put that another way, what we want with a measure of dispersion is not just difference but distance from the mean, and distance is always positive. Squaring the errors is one way of ensuring that the values are positive (similar to taking the absolute value).\nThere is one small catch to squaring though. It makes it a really weird measure to think about - like, what is a square gram? Hard to say. That‚Äôs why it is common to take the square root of the variance, to get the measure back into units of the data. This value is known as the standard deviation, \\(s\\). You can calculate it with the sd() function.\n\nsd(penguins$body_mass_g, na.rm = TRUE)\n\n[1] 802\n\n\nThat‚Äôs about 1.8 pounds (if you prefer Imperial units).\nTable summaries\nTo generate summary statistics for all the variables in your data, base R provides a really nice summary() function that you can apply to a table like so:\n\nsummary(penguins)\n\n      species          island    bill_length_mm bill_depth_mm \n Adelie   :152   Biscoe   :168   Min.   :32.1   Min.   :13.1  \n Chinstrap: 68   Dream    :124   1st Qu.:39.2   1st Qu.:15.6  \n Gentoo   :124   Torgersen: 52   Median :44.5   Median :17.3  \n                                 Mean   :43.9   Mean   :17.1  \n                                 3rd Qu.:48.5   3rd Qu.:18.7  \n                                 Max.   :59.6   Max.   :21.5  \n                                 NA's   :2      NA's   :2     \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172       Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190       1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197       Median :4050   NA's  : 11   Median :2008  \n Mean   :201       Mean   :4202                Mean   :2008  \n 3rd Qu.:213       3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231       Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\n\nAs you can see, this prints out summary statistics for the variables in your data. However, the printout is not easy to read and it provides a somewhat limited set of summary statistics. As an alternative, you might try the skim() function from the skimr package.\n\nNote that I have applied css styling to this table output to make it more compact and fit on the screen. Yours will look slightly different.\n\nskim(penguins)\n\n\nData summary\n\n\nName\npenguins\n\n\nNumber of rows\n344\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\nspecies\n0\n1.00\nFALSE\n3\nAde: 152, Gen: 124, Chi: 68\n\n\nisland\n0\n1.00\nFALSE\n3\nBis: 168, Dre: 124, Tor: 52\n\n\nsex\n11\n0.97\nFALSE\n2\nmal: 168, fem: 165\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nbill_length_mm\n2\n0.99\n43.9\n5.46\n32.1\n39.2\n44.5\n48.5\n59.6\n‚ñÉ‚ñá‚ñá‚ñÜ‚ñÅ\n\n\nbill_depth_mm\n2\n0.99\n17.1\n1.97\n13.1\n15.6\n17.3\n18.7\n21.5\n‚ñÖ‚ñÖ‚ñá‚ñá‚ñÇ\n\n\nflipper_length_mm\n2\n0.99\n200.9\n14.06\n172.0\n190.0\n197.0\n213.0\n231.0\n‚ñÇ‚ñá‚ñÉ‚ñÖ‚ñÇ\n\n\nbody_mass_g\n2\n0.99\n4201.8\n801.95\n2700.0\n3550.0\n4050.0\n4750.0\n6300.0\n‚ñÉ‚ñá‚ñÜ‚ñÉ‚ñÇ\n\n\nyear\n0\n1.00\n2008.0\n0.82\n2007.0\n2007.0\n2008.0\n2009.0\n2009.0\n‚ñá‚ñÅ‚ñá‚ñÅ‚ñá\n\n\n\n\n\n\n\nAs you can see, there are three major sections of this printout: (i) Data Summary, (ii) Factor variables, and (iii) Numeric variables. The Data Summary gives you an overview of your table, with counts of the number of rows and columns, as well as counts of the different types of variables (factor, numeric, etc). The section on factor variables gives you counts for each level of the factor (for example, counts of the different species of penguins), as well as information about missing data. Finally, the section on numeric variables gives you information on missing data, as well as measures of dispersion and central tendency, including the mean, median (p50), and standard deviation (sd), the range or minimum and maximum values (p0 and p100), and the inner quartiles (p25 and p75).11¬†You‚Äôll learn more about quartiles and how to visualize distributions in the next lab.\nExercises\n\nHave a look at the penguins data again. Use head() to preview the first 15 rows.\nWith the penguins data, calculate all of the following:\n\nmedian body mass\nmean bill depth\nvariance in bill depth\nstandard deviation in bill length"
  },
  {
    "objectID": "labs/02-probability-lab.html#the-grammar-of-graphics",
    "href": "labs/02-probability-lab.html#the-grammar-of-graphics",
    "title": "Lab 02: Statistical Graphics",
    "section": "The Grammar of Graphics",
    "text": "The Grammar of Graphics\nIt‚Äôs easy to imagine how you would go about with pen and paper drawing a bar chart of, say, the number of penguins in each species in the penguins dataset. But, what if you had to dictate the steps to make that graph to another person, one you can‚Äôt see or physically interact with? All you can do is use words to communicate the graphic you want. How would you do it? The challenge here is that you and your illustrator must share a coherent vocabulary for describing graphics. That way you can unambiguously communicate your intent. That‚Äôs essentially what the grammar of graphics is, a language with a set of rules (a grammar) for specifying each component of a graphic.\nNow, if you squint just right, you can see that R has a sort of grammar built-in with the base graphics package. To visualize data, it provides the default plot() function, which you learned about in the last lab. This is a workhorse function in R that will give you a decent visualization of your data fast, with minimal effort. It does have its limitations though. For starters, the default settings are, shall we say, less than appealing. I mean, they‚Äôre fine if late-nineties styles are your thing, but less than satisfying if a more modern look is what you‚Äôre after.2 Second, taking fine-grained control over graphics generated with plot() can be quite frustrating, especially when you want to have a faceted figure (a figure with multiple plot panels).2¬†But, you know, opinions, everyone has them, and there‚Äôs no accounting for taste.\nThat‚Äôs where the ggplot2 package comes in. It provides an elegant implementation of the grammar of graphics, one with more modern aesthetics and with a more standardized framework for fine-tuning figures, so that‚Äôs what we‚Äôll be using here. From time to time, I‚Äôll try to give you examples of how to do things with the plot() function, too, so you can speak sensibly to the die-hard holdouts, but we‚Äôre going to focus on learning ggplot.\n\n\n\n\n\n\nTip\n\n\n\n\n\nThere are several excellent sources of additional information on statistical graphics in R and statistical graphics in general that I would recommend.\n\nThe website for the ggplot2 package: https://ggplot2.tidyverse.org/. This has loads of articles and references that will answer just about any question you might have.\n\nThe R graph gallery website: https://r-graph-gallery.com/. This has straightforward examples of how to make all sorts of different plot visualizations, both with base R and ggplot.\n\nClaus Wilke‚Äôs free, online book Fundamentals of Data Visualization, which provides high-level rules or guidelines for generating statistical graphics in a way that clearly communicates its meaning or intent and is visually appealing.\n\nThe free, online book ggplot2: Elegant Graphics for Data Analysis (3ed) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. This is a more a deep dive into the grammar of graphics than a cookbook, but it also has lots of examples of making figures with ggplot2.\n\n\n\n\nSo, to continue our analogy above, we‚Äôre going to treat R like our illustrator, and ggplot2 is the language we are going to speak to R to visualize our data. So, how do we do that? Well, let‚Äôs start with the basics. Suppose we want to know if there‚Äôs some kind of relationship (an allometric relationship) among the Palmer Station penguins between their body mass and bill length. Here‚Äôs how we would visualize that.\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  )\n\n\n\n\nHere, we have created what is known as a scatterplot, a representation of the raw data as points on a Cartesian grid. There are several things to note about the code used to generate this plot.\n\nFirst, it begins with a call to the ggplot() function. This takes a data argument. In this case, we say that we want to make a plot to visualize the penguins data.\nThe next function call is geom_point(). This is a way of specifying the geometry we want to plot. Here we chose points, but we could have used another choice (lines, for example, or polygons).\nNote that the geom_point() call takes a mapping argument. You use this to specify how variables in your data are mapped to properties of the graphic. Here, we chose to map the body_mass_g variable to the x-coordinates and the bill_length_mm variable to the y-coordinates. Importantly, we use the aes() function to supply an aesthetic to the mapping parameter. This is always the case.\nThe final thing to point out here is that we combined or connected these arguments using the plus-sign, +. You should read this literally as addition, as in ‚Äúmake this ggplot of the penguins data and add a point geometry to it.‚Äù Be aware that the use of the plus-sign in this way is unique to the ggplot2 package and won‚Äôt work with other graphical tools in R.\n\nWe can summarize these ideas with a simple template. All that is required to make a graph in R is to replace the elements in the bracketed sections with a dataset, a geometry function, and an aesthetic mapping.\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\nOne of the great things about ggplot, something that makes it stand out compared to alternative graphics engines in R, is that you can assign plots to a variable and call it in different places, or modify it as needed.\npenguins_plot <- ggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  )\n\npenguins_plot\nExercises\n\nRecreate the scatterplot above, but switch the axes. Put bill length on the x-axis and body mass on the y-axis.\nNow create a scatterplot of bill length (on the y-axis) by bill depth (on the x-axis)."
  },
  {
    "objectID": "labs/02-probability-lab.html#aesthetics",
    "href": "labs/02-probability-lab.html#aesthetics",
    "title": "Lab 02: Statistical Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\nIn the plot above, we only specified the position of the points (the x- and y-coordinates) in the aesthetic mapping, but there are many aesthetics (see the figure below), and we can map the same or other variables to those.\n\n\nFigure¬†2: Commonly used aesthetics. Figure from Claus O. Wilke. Fundamentals of Data Visualization. O‚ÄôReilly, 2019.\n\n\nConsider, for example, the fact that there are three penguin species in our dataset: Adelie, Gentoo, and Chinstrap. Do we think the relationship between body mass and bill length holds for all of them? Let‚Äôs add penguin species to our aesthetic mapping (specifically to the color parameter) and see what happens.\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  )\n\n\n\n\nNotice that ggplot2 automatically assigns a unique color to each species and adds a legend to the right that explains each color. In this way, the color doesn‚Äôt just change the look of the figure. It conveys information about the data. Rather than mapping a variable in the data to a specific aesthetic, though, we can also define an aesthetic manually for the geometry as a whole. In this case, the aesthetics do not convey information about the data. They merely change the look of the figure. The key to doing this is to move the specification outside the aes(), but still inside the geom_point() function.\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm),\n    shape = 21,\n    size = 4,\n    color = \"darkred\",\n    fill = \"darkgoldenrod1\"\n  )\n\n\n\n\nNotice that we specified the shape with a number. R has 25 built-in shapes that you can specify with a number, as shown in the figure below. Some important differences in these shapes concern the border and fill colors. The hollow shapes (0-14) have a border that you specify with color, the solid shapes (15-20) have a border and fill, both specified with color, and the filled shapes (21-24) have separate border and fill colors, specified with color and fill respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nNote that you can use hexadecimal codes like #004F2D instead of ‚Äúforestgreen‚Äù to specify a color. This also allows you to specify a much wider range of colors. See https://htmlcolorcodes.com/ for one way of exploring colors.\n\n\n\nExercises\n\nChange the code below to map the species variable to the x-axis (in addition to the color).\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  )\n\nWhat does this do to the position of the points?\nChange the code below to map the species variable to the shape aesthetic (in addition to the color).\n\n# hint: use shape = ...\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  )\n\nChange the code below to map the species variable to the size aesthetic (replacing color).\n\n# hint: use size = ...\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  )\n\nFor the following code, change the color, size, and shape aesthetics for the entire geometry (do not map them to the data).\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm),\n    color = , # <------- insert value here\n    size = ,  # <------- \n    shape =   # <------- \n  )"
  },
  {
    "objectID": "labs/02-probability-lab.html#geometries",
    "href": "labs/02-probability-lab.html#geometries",
    "title": "Lab 02: Statistical Graphics",
    "section": "Geometries",
    "text": "Geometries\nHave a look at these two plots.\n\n\n\n\n\n\n\n\n\n\nBoth represent the same data and the same x and y variables, but they do so in very different ways. That difference concerns their different geometries. As their name suggests, these are geometrical objects used to represent the data. To change the geometry, simply change the geom_*() function. For example, to create the plots above, use the geom_point() and geom_smooth() functions.\n# left\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  )\n\n# right\nggplot(data = penguins) + \n  geom_smooth(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  )\nWhile every geometry function takes a mapping argument, not every aesthetic works (or is needed) for every geometry. For example, there‚Äôs no shape aesthetic for lines, but there is a linetype. Conversely, points have a shape, but not a linetype.\n\nggplot(data = penguins) + \n  geom_smooth(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, linetype = species),\n  )\n\n\n\n\nOne really important thing to note here is that you can add multiple geometries to the same plot to represent the same data. Simply add them together with +.\n\nggplot(data = penguins) + \n  geom_smooth(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, linetype = species),\n  ) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  )\n\n\n\n\nThat‚Äôs a hideous figure, though it should get the point across. While layering in this way is a really powerful tool for visualizing data, it does have one important drawback. Namely, it violates the DRY principle (Don‚Äôt Repeat Yourself), as it specifies the x and y variables twice. This makes it harder to make changes, forcing you to edit the same aesthetic parameters in multiple locations. To avoid this, ggplot2 allows you to specify a common set of aesthetic mappings in the ggplot() function itself. These will then apply globally to all the geometries in the figure.\nggplot(\n  data = penguins,\n  mapping = aes(x = body_mass_g, y = bill_length_mm)\n) +\n  geom_smooth(mapping = aes(linetype = species)) +\n  geom_point(mapping = aes(color = species))\nNotice that you can still specify specific aesthetic mappings in each geometry function. These will apply only locally to that specific geometry rather than globally to all geometries in the plot. In the same way, you can specify different data for each geometry.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = body_mass_g, y = bill_length_mm)\n) +\n  geom_smooth(data = filter(penguins, species == \"Adelie\")) +\n  geom_point(mapping = aes(color = species))\n\n\n\n\nSome of the more important geometries you are likely to use include:\n\ngeom_point()\ngeom_line()\ngeom_segment()\ngeom_polygon()\ngeom_boxplot()\ngeom_histogram()\ngeom_density()\n\nWe‚Äôll actually cover those last three in the section on plotting distributions. For a complete list of available geometries, see the layers section of the ggplot2 website reference page."
  },
  {
    "objectID": "labs/02-probability-lab.html#facets",
    "href": "labs/02-probability-lab.html#facets",
    "title": "Lab 02: Statistical Graphics",
    "section": "Facets",
    "text": "Facets\nSometimes mapping variables to aesthetics can generate a lot of noise and clutter, making it hard to read or interpret a figure. One way to handle this is to split your plot into multiple plots or facets based on levels of a categorical variable like species. To do this for one categorical variable, you use the facet_wrap() function.\n\nggplot(data = penguins) +\n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) +\n  facet_wrap(vars(species))\n\n\n\n\nPlacing species in the vars() function tells facet_wrap() to ‚Äúsplit the plot by species.‚Äù If you want to split the plot by two categorical variables, like species and sex, use the facet_grid() function.\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) +\n  facet_grid(rows = vars(species), cols = vars(sex))\n\n\n\n\nEvidently, there are some penguins for whom the sex is unknown. To remove these penguins from the dataset, you can use the na.omit() function.\n\nggplot(data = na.omit(penguins)) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) +\n  facet_grid(rows = vars(species), cols = vars(sex))\n\n\n\n\nExercises\n\nUse facet_wrap() to split the following scatterplot of the penguins data by sex.\n\nggplot(data = na.omit(penguins)) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) + \n  facet_wrap() # <------- insert value here\n\nNow, map the species to the color aesthetic for the point geometry.\nUse facet_grid() to split the following scatterplot of the penguins data by species and island.\n\nggplot(data = na.omit(penguins)) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) + \n  facet_grid() # <------- insert value here\n\nWhat does this tell you about how species are distributed across islands?"
  },
  {
    "objectID": "labs/02-probability-lab.html#scales",
    "href": "labs/02-probability-lab.html#scales",
    "title": "Lab 02: Statistical Graphics",
    "section": "Scales",
    "text": "Scales\nScales provide the basic structure that determines how data values get mapped to visual properties in a graph. The most obvious example is the axes because these determine where things will be located in the graph, but color scales are also important if you want your figure to provide additional information about your data. Here, we will briefly cover two aspects of scales that you will often want to change: axis labels and color palettes, in particular palettes that are colorblind safe.\nLabels\nBy default, ggplot2 uses the names of the variables in the data to label the axes. This, however, can lead to poor graphics as naming conventions in R are not the same as those you might want to use to visualize your data. Fortunately, ggplot2 provides tools for renaming the axis and plot titles. The one you are likely to use most often is probably the labs() function. Here is a standard usage:\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm)\n  ) +\n  labs(\n    x = \"Body mass (g)\",\n    y = \"Bill length (mm)\",\n    title = \"Palmer Penguins\"\n  )\n\n\n\n\nColor Palettes\nWhen you map a variable to an aesthetic property, ggplot2 will supply a default color palette. This is fine if you are just wanting to explore the data yourself, but when it comes to publication-ready graphics, you should be a little more thoughtful. The main reason for this is that you want to make sure your graphics are accessible. For instance, the default ggplot2 color palette is not actually colorblind safe. To address this shortcoming, you can specify colorblind safe color palettes using the scale_color_viridis() function from the viridis package.3 It works like this:3¬†When it comes to colors in R, the sky is the limit. As far as I am aware, the most comprehensive list of palettes for use in R is provided by the paletteer package, which attempts to collect all of the palettes scattered across the R ecosystem into one place. See also this beautiful website for creating custom color palettes: https://coolors.co/.\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  ) +\n  labs(\n    x = \"Body mass (g)\",\n    y = \"Bill length (mm)\",\n    title = \"Palmer Penguins\"\n  ) +\n  scale_color_viridis(\n    option = \"viridis\", \n    discrete = TRUE\n  )\n\n\n\n\n\n\n\n\n\n\nFor comparison, I‚Äôm showing the viridis scale next to the default ggplot2 scale, so you can see the difference. Two things to note about scale_color_viridis(). First, you choose a specific colorblind safe palette with the option parameter. In this case, I chose viridis, but there are others, including magma, cividis, and inferno, to name a few. Second, if the variable is continuous rather than discrete, you will have to set discrete = FALSE in the function, otherwise it will throw an error.\nExercises\n\nUsing the penguins dataset, plot body mass (y variable) by bill length (x variable) and change the axis labels to reflect this.\nUsing the penguins dataset, plot bill length (y variable) by bill depth (x variable) and change the axis labels to reflect this.\n\nUsing the code below, try out these different colorblind safe palettes from the viridis package:\n\nmagma\ncividis\ninferno\n\n\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  ) +\n  labs(\n    x = \"Body mass (g)\",\n    y = \"Bill length (mm)\",\n    title = \"Palmer Penguins\"\n  ) +\n  scale_color_viridis(\n    option = , # <------- insert value here\n    discrete = TRUE\n  )"
  },
  {
    "objectID": "labs/02-probability-lab.html#themes",
    "href": "labs/02-probability-lab.html#themes",
    "title": "Lab 02: Statistical Graphics",
    "section": "Themes",
    "text": "Themes\nTo control the display of non-data elements in a figure, you can specify a theme. This is done with the theme() function. Using this can get pretty complicated, pretty quick, as there are many many elements of a figure that can be modified, so rather than elaborate on it in detail, I want to draw your attention to pre-defined themes that you can use to modify your plots in a consistent way.\nHere is an example of the black and white theme, which removes filled background grid squares, leaving only the grid lines.\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  ) +\n  labs(\n    x = \"Body mass (g)\",\n    y = \"Bill length (mm)\",\n    title = \"Palmer Penguins\"\n  ) +\n  theme_bw()\n\n\n\n\nExercises\n\nComplete the code below, trying out each separate theme:\n\ntheme_minimal()\ntheme_classic()\ntheme_void()\n\n\n\nggplot(data = penguins) + \n  geom_point(\n    mapping = aes(x = body_mass_g, y = bill_length_mm, color = species)\n  ) +\n  labs(\n    x = \"Body mass (g)\",\n    y = \"Bill length (mm)\",\n    title = \"Palmer Penguins\"\n  ) +\n  theme_    # <------- complete function call to change theme"
  },
  {
    "objectID": "labs/02-probability-lab.html#homework",
    "href": "labs/02-probability-lab.html#homework",
    "title": "Lab 02: Statistical Graphics",
    "section": "Homework",
    "text": "Homework\n\n\nLoad data. For this homework exercise, we‚Äôll work with the DartPoints dataset from the archdata package. When you ran library(archdata), this dataset should have been attached to your current R session, so don‚Äôt worry about loading it into R. It‚Äôs already there!\n\nSummary statistics. Let‚Äôs summarize these data now.\n\nUse head() to print out the first 10 rows of the table.\nUse mean() and median() on the Length, Width, Thickness, and Weight variables. (Hint: use DartPoints$<VARIABLE> as in DartPoints$Length.)\nUse var() and sd() on the same.\nNow use skim() to summarize the DartPoints data.\n\n\n\nGraphics. And now to visualize them.\n\nUse ggplot() to make a scatterplot showing dart point length as a function of weight. (Hint: use geom_point().)\nIs there a trend?\nMap the dart point Name (this is the dart point type) to the color aesthetic. (Hint: this should go inside the aes() mapping!)\nDo you see any meaningful differences between dart point types?\nChange the size of all points to 2.5. (Hint: this should go outside the aes() mapping but inside geom_point()!)\nUse scale_color_viridis() to make the color scale colorblind safe. Feel free to use whichever palette you prefer. (Hint: dart point type is a categorical variable, so you need to set discrete = TRUE!)\nTry out facet_wrap() on the dart point Name variable.\nDoes this make it easier or harder to see differences between types?"
  },
  {
    "objectID": "slides/01-intro-slides.html#lecture-outline",
    "href": "slides/01-intro-slides.html#lecture-outline",
    "title": "Lecture 01: Introduction",
    "section": "üìã Lecture Outline",
    "text": "üìã Lecture Outline\n\nCourse Mechanics\n\nüß± Structure\n\nüéØ Objectives\n\nüèã Expectations\n\nü§ù Ethics\n\nüíæ Software\n\n\nCourse Content\n\nWhy statistics?\n\nWhat is an archaeological population?\n\nA note about terminology and notation\n\nStatistical programming with \n\nLiterate programming with Quarto"
  },
  {
    "objectID": "slides/01-intro-slides.html#course-structure",
    "href": "slides/01-intro-slides.html#course-structure",
    "title": "Lecture 01: Introduction",
    "section": "üß± Course Structure",
    "text": "üß± Course Structure\n\nMeetings are online every Tuesday from 2:00 to 5:00 PM MST.\n\nMeeting structure:\n\nhomework review and lecture (80 minutes),\n\nbreak (10 minutes), and\n\nlab (90 minutes).\n\n\nCourse work:\n\nlab and homework exercises due every Monday before class by 9:00 PM MST, and a\n\nterm project.\n\n\nAll course materials will be made available on the course website.\n\nAll graded materials will be submitted through Canvas."
  },
  {
    "objectID": "slides/01-intro-slides.html#course-objectives",
    "href": "slides/01-intro-slides.html#course-objectives",
    "title": "Lecture 01: Introduction",
    "section": "üéØ Course Objectives",
    "text": "üéØ Course Objectives\n\nStudents will develop programming skills by learning how to:\n\nimport and export data,\nwrangle (or prepare) data for analysis,\nexplore and visualize data, and\nbuild models of data and evaluate them.\n\n\n\nAnd students will gain statistical understanding by learning how to:\n\nformulate questions and alternative hypotheses,\nidentify and explain appropriate statistical tools,\nreport the results of analysis using scientific standards, and\ncommunicate the analysis to a general audience."
  },
  {
    "objectID": "slides/01-intro-slides.html#course-expectations",
    "href": "slides/01-intro-slides.html#course-expectations",
    "title": "Lecture 01: Introduction",
    "section": "üèã Course Expectations",
    "text": "üèã Course Expectations\nLearning is a lot like moving to a new city. You get lost, you get frustrated, you even get embarrassed! But gradually, over time, you come to know your way around. Unfortunately, you‚Äôll only have four months in this new city, so we need to be realistic about what we can actually achieve here.\n\n\nYou won‚Äôt become fluent in R, markdown, or statistics, but‚Ä¶\n\n\nyou will gain some sense of the way things tend to go with those languages."
  },
  {
    "objectID": "slides/01-intro-slides.html#course-ethics",
    "href": "slides/01-intro-slides.html#course-ethics",
    "title": "Lecture 01: Introduction",
    "section": "ü§ù Course Ethics",
    "text": "ü§ù Course Ethics\nAll course policies and other University requirements can be found in the course syllabus. They are very, very thorough, so rather than enumerate them all, let‚Äôs just summarize them this way:\n\n\nThere are many ways to be a bully. Don‚Äôt be any of them.\n\nAnd if you see someone getting bullied, do something about it."
  },
  {
    "objectID": "slides/01-intro-slides.html#software",
    "href": "slides/01-intro-slides.html#software",
    "title": "Lecture 01: Introduction",
    "section": "üíæ Software",
    "text": "üíæ Software\nThe primary statistical tools for this class are\n\n Programming Language\nRStudio\nQuarto\n\nWe will go over how to install each of these during our first lab."
  },
  {
    "objectID": "slides/01-intro-slides.html#why-statistics",
    "href": "slides/01-intro-slides.html#why-statistics",
    "title": "Lecture 01: Introduction",
    "section": "Why statistics?",
    "text": "Why statistics?\n\n\n\n\n\n\n\n\n\n We want to understand something about a population.\n\nWe can never observe the entire population, so we draw a sample.\n\n\nWe then use a model to describe the sample.\n\n\nBy comparing that model to a null model, we can infer something about the population."
  },
  {
    "objectID": "slides/01-intro-slides.html#what-population-does-archaeology-study",
    "href": "slides/01-intro-slides.html#what-population-does-archaeology-study",
    "title": "Lecture 01: Introduction",
    "section": "What population does archaeology study?",
    "text": "What population does archaeology study?"
  },
  {
    "objectID": "slides/01-intro-slides.html#a-note-on-terminology-and-notation",
    "href": "slides/01-intro-slides.html#a-note-on-terminology-and-notation",
    "title": "Lecture 01: Introduction",
    "section": "A note on terminology and notation",
    "text": "A note on terminology and notation\n\n\n\nA statistic is a property of a sample.\n‚ÄúWe measured the heights of 42 actors who auditioned for the role of Aragorn and took the average.‚Äù\nA parameter is a property of a population.\n‚ÄúHuman males have an average height of 1.74 meters (5.7 feet).‚Äù\nNote: Parameters are usually capitalized.\n\n\n\n\n\n  \n  \n  \n  \n    \n      \n      population\n      sample\n    \n  \n  \n    Size\nN\nn\n    Mean\nŒº\nxÃÑ\n    Standard Deviation\nœÉ\ns\n    Proportion\nP\np\n    Correlation\nœÅ\nr"
  },
  {
    "objectID": "slides/01-intro-slides.html#why-fa-brands-r-project-colorsteelblue",
    "href": "slides/01-intro-slides.html#why-fa-brands-r-project-colorsteelblue",
    "title": "Lecture 01: Introduction",
    "section": "Why ?",
    "text": "Why ?\nWhy R?\n\n\n\n\nIt‚Äôs free!It‚Äôs transferrable!It‚Äôs efficient!It‚Äôs extensible!It‚Äôs pretty figures!It‚Äôs reproducible!It‚Äôs a community!\n\n\nR is free software under the terms of the Free Software Foundation‚Äôs GNU General Public License.\n\n\nR will run on any system: Mac OS, Windows, or Linux.\n\n\nR lets you exploit the awesome computing powers of the modern world. It also provides an elegant and concise syntax for writing complex statistical operations.\n\n\n\n\n\nR users can write add-on packages that provide additional functionality. Here are a few of my favorites.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR offers a lot of tools to produce really, really impressive graphics. For example, here is a simple plot of a normal distribution:\n\n\n\n\n\n\n\n\n\n\n\nR facilitates reproducible research in two ways. First, it forces you to declare explicitly each step in your analysis.\n\n# take the mean\nmean(my_data)\n\n# take the standard deviation\nsd(my_data)\n\nSecond, it makes R code shareable. In the simplest case, we use R scripts, but we can also use Quarto, a much more flexible tool for writing, running, and explaining R code.\n\n\nR is also an incredibly active and growing community."
  },
  {
    "objectID": "slides/01-intro-slides.html#literate-programming-with-markdown-fa-brands-markdown",
    "href": "slides/01-intro-slides.html#literate-programming-with-markdown-fa-brands-markdown",
    "title": "Lecture 01: Introduction",
    "section": "Literate programming with markdown ",
    "text": "Literate programming with markdown \n\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. From the Wikipedia page.\n\n\n\nINPUT\n\n\nThis is a sentence in Markdown, containing `code`, **bold text**, and *italics*.\n\n\nOUTPUT\n\nThis is a sentence in Markdown, containing code, bold text, and italics."
  },
  {
    "objectID": "slides/01-intro-slides.html#quarto-markdown-r",
    "href": "slides/01-intro-slides.html#quarto-markdown-r",
    "title": "Lecture 01: Introduction",
    "section": "Quarto = Markdown + R",
    "text": "Quarto = Markdown + R\nQuarto allows you to run code and format text in one document.\n\n\nINPUT\n\nThis is an example of Quarto with markdown __syntax__ \nand __R code__.\n\n```{r}\n#| fig-width: 4\n#| fig-asp: 1\n#| fig-align: center\n\nfit <- lm(dist ~ speed, data = cars)\n\npar(pty = \"s\")\n\nplot(cars, pch = 19, col = 'darkgray')\nabline(fit, lwd = 2)\n```\n\nOUTPUT\n\nThis is an example of Quarto with markdown syntax and R code."
  },
  {
    "objectID": "slides/02-probability-slides.html#lecture-outline",
    "href": "slides/02-probability-slides.html#lecture-outline",
    "title": "Lecture 02: Probability as a Model",
    "section": "üìã Lecture Outline",
    "text": "üìã Lecture Outline\n\nWhy statistics?\nüß™ A simple experiment\nSome terminology\nüé∞ Random variables\nüé≤ Probability\nüìä Probability Distribution\nProbability Distribution as a Model\nProbability Distribution as a Function\nProbability Mass Functions\nProbability Density Functions\nüöó Cars Model\nBrief Review\nA Simple Formula\nA Note About Complexity"
  },
  {
    "objectID": "slides/02-probability-slides.html#why-statistics",
    "href": "slides/02-probability-slides.html#why-statistics",
    "title": "Lecture 02: Probability as a Model",
    "section": "Why statistics?",
    "text": "Why statistics?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to understand something about a population.\nWe can never observe the entire population, so we draw a sample.\nWe then use a model to describe the sample.\nBy comparing that model to a null model, we can infer something about the population.\n\n\nHere, we‚Äôre going to focus on statistical description, aka models."
  },
  {
    "objectID": "slides/02-probability-slides.html#a-simple-experiment",
    "href": "slides/02-probability-slides.html#a-simple-experiment",
    "title": "Lecture 02: Probability as a Model",
    "section": "üß™ A simple experiment",
    "text": "üß™ A simple experiment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe take ten cars, send each down a track, have them brake at the same point, and measure the distance it takes them to stop.\n\n\nQuestion: how far do you think it will take the next car to stop?\n\n\nQuestion: what distance is the most probable?\nBut, how do we determine this?"
  },
  {
    "objectID": "slides/02-probability-slides.html#some-terminology",
    "href": "slides/02-probability-slides.html#some-terminology",
    "title": "Lecture 02: Probability as a Model",
    "section": "Some terminology",
    "text": "Some terminology"
  },
  {
    "objectID": "slides/02-probability-slides.html#random-variables",
    "href": "slides/02-probability-slides.html#random-variables",
    "title": "Lecture 02: Probability as a Model",
    "section": "üé∞ Random Variables",
    "text": "üé∞ Random Variables\nTwo types of random variable:\n\n\nDiscrete random variables often take only integer (non-decimal) values.\n\nExamples: number of heads in 10 tosses of a fair coin, number of victims of the Thanos snap, number of projectile points in a stratigraphic level, number of archaeological sites in a watershed.\n\nContinuous random variables take real (decimal) values.\n\nExamples: cost in property damage of a superhero fight, kilocalories per kilogram, kilocalories per hour, ratio of isotopes\n\nNote: for continuous random variables, the sample space is infinite!"
  },
  {
    "objectID": "slides/02-probability-slides.html#probability",
    "href": "slides/02-probability-slides.html#probability",
    "title": "Lecture 02: Probability as a Model",
    "section": "üé≤ Probability",
    "text": "üé≤ Probability\nLet \\(X\\) be the number of heads in two tosses of a fair coin. What is the probability that \\(X=1\\)?"
  },
  {
    "objectID": "slides/02-probability-slides.html#probability-distribution-as-a-model",
    "href": "slides/02-probability-slides.html#probability-distribution-as-a-model",
    "title": "Lecture 02: Probability as a Model",
    "section": "Probability Distribution as a Model",
    "text": "Probability Distribution as a Model\n\n\n\nHas two components:\n\nCentral-tendency or ‚Äúfirst moment‚Äù\n\nPopulation mean (\\(\\mu\\)). Gives the expected value of an experiment, \\(E[X] = \\mu\\).\n\nSample mean (\\(\\bar{x}\\)). Estimate of \\(\\mu\\) based on a sample from \\(X\\) of size \\(n\\).\n\n\n\n\nDispersion or ‚Äúsecond moment‚Äù\n\nPopulation variance (\\(\\sigma^2\\)). The expected value of the squared difference from the mean.\n\nSample variance (\\(s^2\\)). Estimate of \\(\\sigma^2\\) based on a sample from \\(X\\) of size \\(n\\).\n\nStandard deviation (\\(\\sigma\\)) or \\(s\\) is the square root of the variance."
  },
  {
    "objectID": "slides/02-probability-slides.html#probability-distribution-as-a-function",
    "href": "slides/02-probability-slides.html#probability-distribution-as-a-function",
    "title": "Lecture 02: Probability as a Model",
    "section": "Probability Distribution as a Function",
    "text": "Probability Distribution as a Function\nThese can be defined using precise mathematical functions:\n\nA probability mass function (PMF) for discrete random variables.\n\nExamples: Bernoulli, Binomial, Negative Binomial, Poisson\n\nStraightforward probability interpretation.\n\n\n\n\nA probability density function (PDF) for continuous random variables.\n\nExamples: Normal, Chi-squared, Student‚Äôs t, and F\n\nHarder to interpret probability:\n\nWhat is the probability that a car takes 10.317 m to stop? What about 10.31742 m?\n\nBetter to consider probability across an interval.\n\n\nRequires that the function integrate to one (probability is the area under the curve)."
  },
  {
    "objectID": "slides/02-probability-slides.html#bernoulli",
    "href": "slides/02-probability-slides.html#bernoulli",
    "title": "Lecture 02: Probability as a Model",
    "section": "Bernoulli",
    "text": "Bernoulli\n\n\n\nDf. distribution of a binary random variable (‚ÄúBernoulli trial‚Äù) with two possible values, 1 (success) and 0 (failure), with \\(p\\) being the probability of success. E.g., a single coin flip.\n\\[f(x,p) = p^{x}(1-p)^{1-x}\\]\nMean: \\(p\\)\nVariance: \\(p(1-p)\\)"
  },
  {
    "objectID": "slides/02-probability-slides.html#binomial",
    "href": "slides/02-probability-slides.html#binomial",
    "title": "Lecture 02: Probability as a Model",
    "section": "Binomial",
    "text": "Binomial\n\n\n\nDf. distribution of a random variable whose value is equal to the number of successes in \\(n\\) independent Bernoulli trials. E.g., number of heads in ten coin flips.\n\\[f(x,p,n) = \\binom{n}{x}p^{x}(1-p)^{1-x}\\]\nMean: \\(np\\)\nVariance: \\(np(1-p)\\)"
  },
  {
    "objectID": "slides/02-probability-slides.html#poisson",
    "href": "slides/02-probability-slides.html#poisson",
    "title": "Lecture 02: Probability as a Model",
    "section": "Poisson",
    "text": "Poisson\n\n\n\nDf. distribution of a random variable whose value is equal to the number of events occurring in a fixed interval of time or space. E.g., number of orcs passing through the Black Gates in an hour.\n\\[f(x,\\lambda) = \\frac{\\lambda^{x}e^{-\\lambda}}{x!}\\]\nMean: \\(\\lambda\\)\nVariance: \\(\\lambda\\)"
  },
  {
    "objectID": "slides/02-probability-slides.html#normal-gaussian",
    "href": "slides/02-probability-slides.html#normal-gaussian",
    "title": "Lecture 02: Probability as a Model",
    "section": "Normal (Gaussian)",
    "text": "Normal (Gaussian)\n\n\n\nDf. distribution of a continuous random variable that is symmetric from positive to negative infinity. E.g., the height of actors who auditioned for the role of Aragorn.\n\\[f(x,\\mu,\\sigma) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\;exp\\left[-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2\\right]\\]\nMean: \\(\\mu\\)\nVariance: \\(\\sigma^2\\)"
  },
  {
    "objectID": "slides/02-probability-slides.html#cars-model",
    "href": "slides/02-probability-slides.html#cars-model",
    "title": "Lecture 02: Probability as a Model",
    "section": "üöó Cars Model",
    "text": "üöó Cars Model\n\n\n\n\n\nLet‚Äôs use the Normal distribution to describe the cars data.\n\n\\(Y\\) is stopping distance for population\n\\(Y\\) is normally distributed, \\(Y \\sim N(\\mu, \\sigma)\\)\nExperiment is a random sample of size \\(n\\) from \\(Y\\) with \\(y_1, y_2, ..., y_n\\) observations.\nSample statistics (\\(\\bar{y}, s\\)) approximate population parameters (\\(\\mu, \\sigma\\)).\n\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\n\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\n\nThis is our approximate expectation\n\n\\(E[Y] = \\mu \\approx \\bar{y}\\)\n\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\n\nBut, there‚Äôs error, \\(\\epsilon\\), in this estimate.\n\n\\(\\epsilon_i = y_i - \\bar{y}\\)\n\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\n\nThe average squared error is the variance:\n\n\\(s^2 = \\frac{1}{n-1}\\sum \\epsilon_{i}^{2}\\)\n\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\nS.D. (\\(s\\)) = 5.353 m\n\nThis is our uncertainty, how big we think any given error will be.\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\nS.D. (\\(s\\)) = 5.353 m\n\nSo, here is our probability model.\n\\[Y \\sim N(\\bar{y}, s)\\] This is only an estimate of \\(N(\\mu, \\sigma)\\)!\n\n\nSample statistics:\n\nMean (\\(\\bar{y}\\)) = 10.54 m\nS.D. (\\(s\\)) = 5.353 m\n\nWith it, we can say, for example, that the probability that a random draw from this distribution falls within one standard deviation (dashed lines) of the mean (solid line) is 68.3%."
  },
  {
    "objectID": "slides/02-probability-slides.html#a-simple-formula",
    "href": "slides/02-probability-slides.html#a-simple-formula",
    "title": "Lecture 02: Probability as a Model",
    "section": "A Simple Formula",
    "text": "A Simple Formula\n\n\n\n\n\nThis gives us a simple formula\n\\[y_i = \\bar{y} + \\epsilon_i\\] where\n\n\\(y_i\\): stopping distance for car \\(i\\), data\n\\(\\bar{y} \\approx E[Y]\\): expectation, predictable\n\\(\\epsilon_i\\): error, unpredictable\n\n\n\nThis gives us a simple formula\n\\[y_i = \\bar{y} + \\epsilon_i\\]\nIf we subtract the mean, we have a model of the errors centered on zero:\n\\[\\epsilon_i = 0 + (y_i - \\bar{y})\\]\n\n\nThis gives us a simple formula\n\\[y_i = \\bar{y} + \\epsilon_i\\]\nIf we subtract the mean, we have a model of the errors centered on zero:\n\\[\\epsilon_i = 0 + (y_i - \\bar{y})\\]\nThis means we can construct a probability model of the errors centered on zero."
  },
  {
    "objectID": "slides/02-probability-slides.html#probability-model-of-errors",
    "href": "slides/02-probability-slides.html#probability-model-of-errors",
    "title": "Lecture 02: Probability as a Model",
    "section": "Probability Model of Errors",
    "text": "Probability Model of Errors\n\n\nNote that the mean changes, but the variance stays the same."
  },
  {
    "objectID": "slides/02-probability-slides.html#summary",
    "href": "slides/02-probability-slides.html#summary",
    "title": "Lecture 02: Probability as a Model",
    "section": "Summary",
    "text": "Summary\nNow our simple formula is this:\n\\[y_i = \\bar{y} + \\epsilon_i\\] \\[\\epsilon \\sim N(0, s) \\]\n\nAgain, \\(\\bar{y} \\approx E[Y] = \\mu\\).\nFor any future outcome:\n\nThe expected value is deterministic\nThe error is stochastic\n\n\nMust assume that the errors are iid!\n\nindependent = they do not affect each other\nidentically distributed = they are from the same probability distribution\n\nThe distribution is now a model of the errors!"
  },
  {
    "objectID": "slides/03-inference-slides.html#lecture-outline",
    "href": "slides/03-inference-slides.html#lecture-outline",
    "title": "Lecture 03: Statistical Inference",
    "section": "üìã Lecture Outline",
    "text": "üìã Lecture Outline\n\nWhy statistics?\nStatistical Inference\nSimple Example\nHypotheses\nTests\nRejecting the null hypothesis\nStudent‚Äôs t-test\nANOVA"
  },
  {
    "objectID": "slides/03-inference-slides.html#why-statistics",
    "href": "slides/03-inference-slides.html#why-statistics",
    "title": "Lecture 03: Statistical Inference",
    "section": "Why statistics?",
    "text": "Why statistics?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to understand something about a population.\nWe can never observe the entire population, so we draw a sample.\nWe then use a model to describe the sample.\nBy comparing that model to a null model, we can infer something about the population.\n\n\nHere, we‚Äôre going to focus on statistical inference."
  },
  {
    "objectID": "slides/02-probability-slides.html",
    "href": "slides/02-probability-slides.html",
    "title": "Lecture 02: Probability as a Model",
    "section": "",
    "text": "Why statistics?\nüß™ A simple experiment\nSome terminology\nüé∞ Random variables\nüé≤ Probability\nüìä Probability Distribution\nProbability Distribution as a Model\nProbability Distribution as a Function\nProbability Mass Functions\nProbability Density Functions\nüöó Cars Model\nBrief Review\nA Simple Formula\nA Note About Complexity"
  }
]